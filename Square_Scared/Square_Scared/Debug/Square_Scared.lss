
Square_Scared.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000236  00800100  00001400  00001494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001400  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004c5  00800336  00800336  000016ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000261e  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dbd  00000000  00000000  00003f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001376  00000000  00000000  00004cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006bc  00000000  00000000  00006074  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000738  00000000  00000000  00006730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001de9  00000000  00000000  00006e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00008c51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	72 c1       	rjmp	.+740    	; 0x2ea <__vector_1>
       6:	00 00       	nop
       8:	00 c2       	rjmp	.+1024   	; 0x40a <__vector_2>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6d c0       	rjmp	.+218    	; 0x118 <__vector_15>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e0       	ldi	r30, 0x00	; 0
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 33       	cpi	r26, 0x36	; 54
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	a6 e3       	ldi	r26, 0x36	; 54
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ab 3f       	cpi	r26, 0xFB	; 251
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	2b d3       	rcall	.+1622   	; 0x71a <main>
      c4:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <Port_init>:
int sec = 0; // cnt가 7000이 넘으면 1 증가하는 초를 세는 변수
bool isGameOver = 0; // Game이 끝남을 알리는 bool 타입 변수

// 포트 초기화
void Port_init(void){
	PORTA=0x00; DDRA=0xff;
      ca:	1b ba       	out	0x1b, r1	; 27
      cc:	8f ef       	ldi	r24, 0xFF	; 255
      ce:	8a bb       	out	0x1a, r24	; 26
	PORTB=0xff; DDRB = 0b11111111;
      d0:	88 bb       	out	0x18, r24	; 24
      d2:	87 bb       	out	0x17, r24	; 23
	PORTC=0x00; DDRC=0xf0;
      d4:	15 ba       	out	0x15, r1	; 21
      d6:	90 ef       	ldi	r25, 0xF0	; 240
      d8:	94 bb       	out	0x14, r25	; 20
	PORTD=0x80; DDRB = 0b11111111;
      da:	90 e8       	ldi	r25, 0x80	; 128
      dc:	92 bb       	out	0x12, r25	; 18
      de:	87 bb       	out	0x17, r24	; 23
	PORTE=0x00; DDRE=0xff;
      e0:	13 b8       	out	0x03, r1	; 3
      e2:	82 b9       	out	0x02, r24	; 2
	PORTF=0x00; DDRF=0x00;
      e4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
      e8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
      ec:	08 95       	ret

000000ee <Interrupt_init>:
}

// 인터럽트 초기화 CTC MODE 사용
void Interrupt_init(void){

	TCCR0 |= (1<<WGM01 | 1<<CS01) ;
      ee:	83 b7       	in	r24, 0x33	; 51
      f0:	8a 60       	ori	r24, 0x0A	; 10
      f2:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<OCIE0);
      f4:	87 b7       	in	r24, 0x37	; 55
      f6:	82 60       	ori	r24, 0x02	; 2
      f8:	87 bf       	out	0x37, r24	; 55
	OCR0 = 100;
      fa:	84 e6       	ldi	r24, 0x64	; 100
      fc:	81 bf       	out	0x31, r24	; 49
	EICRA=0x02; // 하강 에지 트리
      fe:	82 e0       	ldi	r24, 0x02	; 2
     100:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK=0x03; //INT0 사용
     104:	83 e0       	ldi	r24, 0x03	; 3
     106:	89 bf       	out	0x39, r24	; 57
     108:	08 95       	ret

0000010a <init_devices>:
}

// device 전체 초기화
void init_devices(void){

	cli();   // disable all interrupts
     10a:	f8 94       	cli
	Interrupt_init();
     10c:	f0 df       	rcall	.-32     	; 0xee <Interrupt_init>
	Port_init();  	//initialize Port
     10e:	dd df       	rcall	.-70     	; 0xca <Port_init>
	Adc_init();		//initialize ADC
     110:	4d d3       	rcall	.+1690   	; 0x7ac <Adc_init>
	lcd_init();     //initialize GLCD
     112:	4d d4       	rcall	.+2202   	; 0x9ae <lcd_init>
	sei();  	//re-enable interrupts
     114:	78 94       	sei
     116:	08 95       	ret

00000118 <__vector_15>:
}

// Timer Interrupt Routine
ISR(TIMER0_COMP_vect){
     118:	1f 92       	push	r1
     11a:	0f 92       	push	r0
     11c:	0f b6       	in	r0, 0x3f	; 63
     11e:	0f 92       	push	r0
     120:	11 24       	eor	r1, r1
     122:	0b b6       	in	r0, 0x3b	; 59
     124:	0f 92       	push	r0
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	2f 93       	push	r18
     12c:	3f 93       	push	r19
     12e:	4f 93       	push	r20
     130:	5f 93       	push	r21
     132:	6f 93       	push	r22
     134:	7f 93       	push	r23
     136:	8f 93       	push	r24
     138:	9f 93       	push	r25
     13a:	af 93       	push	r26
     13c:	bf 93       	push	r27
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	ef 93       	push	r30
     144:	ff 93       	push	r31
	cnt++;
     146:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <cnt>
     14a:	90 91 3c 03 	lds	r25, 0x033C	; 0x80033c <cnt+0x1>
     14e:	01 96       	adiw	r24, 0x01	; 1
	if(cnt > 7000){  // cnt 가 7000이 되면 1초 증가 함
     150:	89 35       	cpi	r24, 0x59	; 89
     152:	2b e1       	ldi	r18, 0x1B	; 27
     154:	92 07       	cpc	r25, r18
     156:	28 f4       	brcc	.+10     	; 0x162 <__vector_15+0x4a>
	sei();  	//re-enable interrupts
}

// Timer Interrupt Routine
ISR(TIMER0_COMP_vect){
	cnt++;
     158:	90 93 3c 03 	sts	0x033C, r25	; 0x80033c <cnt+0x1>
     15c:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <cnt>
     160:	ad c0       	rjmp	.+346    	; 0x2bc <__vector_15+0x1a4>
	if(cnt > 7000){  // cnt 가 7000이 되면 1초 증가 함
		cnt = 0;
     162:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <cnt+0x1>
     166:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <cnt>
		sec++;
     16a:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <sec>
     16e:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <sec+0x1>
     172:	01 96       	adiw	r24, 0x01	; 1
     174:	90 93 38 03 	sts	0x0338, r25	; 0x800338 <sec+0x1>
     178:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <sec>

		// 장애물을 생성
		fall[f_index].x = 15;
     17c:	c0 91 3f 03 	lds	r28, 0x033F	; 0x80033f <f_index>
     180:	d0 91 40 03 	lds	r29, 0x0340	; 0x800340 <f_index+0x1>
     184:	8e 01       	movw	r16, r28
     186:	00 0f       	add	r16, r16
     188:	11 1f       	adc	r17, r17
     18a:	f8 01       	movw	r30, r16
     18c:	ec 0f       	add	r30, r28
     18e:	fd 1f       	adc	r31, r29
     190:	ee 0f       	add	r30, r30
     192:	ff 1f       	adc	r31, r31
     194:	e1 58       	subi	r30, 0x81	; 129
     196:	fc 4f       	sbci	r31, 0xFC	; 252
     198:	8f e0       	ldi	r24, 0x0F	; 15
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	91 83       	std	Z+1, r25	; 0x01
     19e:	80 83       	st	Z, r24
		fall[f_index].y = (rand()%128);		// 랜덤한 y의 위치에 장애물을 생성
     1a0:	0e 94 a2 09 	call	0x1344	; 0x1344 <rand>
     1a4:	c0 0f       	add	r28, r16
     1a6:	d1 1f       	adc	r29, r17
     1a8:	cc 0f       	add	r28, r28
     1aa:	dd 1f       	adc	r29, r29
     1ac:	c1 58       	subi	r28, 0x81	; 129
     1ae:	dc 4f       	sbci	r29, 0xFC	; 252
     1b0:	8f 77       	andi	r24, 0x7F	; 127
     1b2:	90 78       	andi	r25, 0x80	; 128
     1b4:	99 23       	and	r25, r25
     1b6:	24 f4       	brge	.+8      	; 0x1c0 <__vector_15+0xa8>
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	80 68       	ori	r24, 0x80	; 128
     1bc:	9f 6f       	ori	r25, 0xFF	; 255
     1be:	01 96       	adiw	r24, 0x01	; 1
     1c0:	9b 83       	std	Y+3, r25	; 0x03
     1c2:	8a 83       	std	Y+2, r24	; 0x02
		fall[f_index].sp = (rand()%5)+2;	// 떨어지는 속도를 다르게 하기 위해 랜덤값 사용
     1c4:	c0 91 3f 03 	lds	r28, 0x033F	; 0x80033f <f_index>
     1c8:	d0 91 40 03 	lds	r29, 0x0340	; 0x800340 <f_index+0x1>
     1cc:	0e 94 a2 09 	call	0x1344	; 0x1344 <rand>
     1d0:	9e 01       	movw	r18, r28
     1d2:	22 0f       	add	r18, r18
     1d4:	33 1f       	adc	r19, r19
     1d6:	c2 0f       	add	r28, r18
     1d8:	d3 1f       	adc	r29, r19
     1da:	cc 0f       	add	r28, r28
     1dc:	dd 1f       	adc	r29, r29
     1de:	c1 58       	subi	r28, 0x81	; 129
     1e0:	dc 4f       	sbci	r29, 0xFC	; 252
     1e2:	65 e0       	ldi	r22, 0x05	; 5
     1e4:	70 e0       	ldi	r23, 0x00	; 0
     1e6:	0e 94 39 09 	call	0x1272	; 0x1272 <__divmodhi4>
     1ea:	02 96       	adiw	r24, 0x02	; 2
     1ec:	9d 83       	std	Y+5, r25	; 0x05
     1ee:	8c 83       	std	Y+4, r24	; 0x04

		f_index++;			// 인덱스 위치 증가
     1f0:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <f_index>
     1f4:	90 91 40 03 	lds	r25, 0x0340	; 0x800340 <f_index+0x1>
     1f8:	01 96       	adiw	r24, 0x01	; 1
		if(f_index >= 20)
     1fa:	84 31       	cpi	r24, 0x14	; 20
     1fc:	91 05       	cpc	r25, r1
     1fe:	2c f4       	brge	.+10     	; 0x20a <__vector_15+0xf2>
		// 장애물을 생성
		fall[f_index].x = 15;
		fall[f_index].y = (rand()%128);		// 랜덤한 y의 위치에 장애물을 생성
		fall[f_index].sp = (rand()%5)+2;	// 떨어지는 속도를 다르게 하기 위해 랜덤값 사용

		f_index++;			// 인덱스 위치 증가
     200:	90 93 40 03 	sts	0x0340, r25	; 0x800340 <f_index+0x1>
     204:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <f_index>
     208:	04 c0       	rjmp	.+8      	; 0x212 <__vector_15+0xfa>
		if(f_index >= 20)
		f_index = 0;
     20a:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <f_index+0x1>
     20e:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <f_index>

		if(sec % 3 == 0) {		// 장애물이 3개 생성 되면 하트를 1개 생성하기 위해 sec % 3 == 0 사용
     212:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <sec>
     216:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <sec+0x1>
     21a:	63 e0       	ldi	r22, 0x03	; 3
     21c:	70 e0       	ldi	r23, 0x00	; 0
     21e:	0e 94 39 09 	call	0x1272	; 0x1272 <__divmodhi4>
     222:	89 2b       	or	r24, r25
     224:	09 f0       	breq	.+2      	; 0x228 <__vector_15+0x110>
     226:	4a c0       	rjmp	.+148    	; 0x2bc <__vector_15+0x1a4>
			heart[h_index].x = 15;
     228:	c0 91 3d 03 	lds	r28, 0x033D	; 0x80033d <h_index>
     22c:	d0 91 3e 03 	lds	r29, 0x033E	; 0x80033e <h_index+0x1>
     230:	8e 01       	movw	r16, r28
     232:	00 0f       	add	r16, r16
     234:	11 1f       	adc	r17, r17
     236:	f8 01       	movw	r30, r16
     238:	ec 0f       	add	r30, r28
     23a:	fd 1f       	adc	r31, r29
     23c:	ee 0f       	add	r30, r30
     23e:	ff 1f       	adc	r31, r31
     240:	ed 5b       	subi	r30, 0xBD	; 189
     242:	fc 4f       	sbci	r31, 0xFC	; 252
     244:	8f e0       	ldi	r24, 0x0F	; 15
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	91 83       	std	Z+1, r25	; 0x01
     24a:	80 83       	st	Z, r24
			heart[h_index].y = (rand()%128);		// 랜덤한 y의 위치에 장애물을 생성
     24c:	0e 94 a2 09 	call	0x1344	; 0x1344 <rand>
     250:	c0 0f       	add	r28, r16
     252:	d1 1f       	adc	r29, r17
     254:	cc 0f       	add	r28, r28
     256:	dd 1f       	adc	r29, r29
     258:	cd 5b       	subi	r28, 0xBD	; 189
     25a:	dc 4f       	sbci	r29, 0xFC	; 252
     25c:	8f 77       	andi	r24, 0x7F	; 127
     25e:	90 78       	andi	r25, 0x80	; 128
     260:	99 23       	and	r25, r25
     262:	24 f4       	brge	.+8      	; 0x26c <__vector_15+0x154>
     264:	01 97       	sbiw	r24, 0x01	; 1
     266:	80 68       	ori	r24, 0x80	; 128
     268:	9f 6f       	ori	r25, 0xFF	; 255
     26a:	01 96       	adiw	r24, 0x01	; 1
     26c:	9b 83       	std	Y+3, r25	; 0x03
     26e:	8a 83       	std	Y+2, r24	; 0x02
			heart[h_index].sp = (rand()%5)+1;	// 떨어지는 속도를 다르게 하기 위해 랜덤값 사용
     270:	c0 91 3d 03 	lds	r28, 0x033D	; 0x80033d <h_index>
     274:	d0 91 3e 03 	lds	r29, 0x033E	; 0x80033e <h_index+0x1>
     278:	0e 94 a2 09 	call	0x1344	; 0x1344 <rand>
     27c:	9e 01       	movw	r18, r28
     27e:	22 0f       	add	r18, r18
     280:	33 1f       	adc	r19, r19
     282:	c2 0f       	add	r28, r18
     284:	d3 1f       	adc	r29, r19
     286:	cc 0f       	add	r28, r28
     288:	dd 1f       	adc	r29, r29
     28a:	cd 5b       	subi	r28, 0xBD	; 189
     28c:	dc 4f       	sbci	r29, 0xFC	; 252
     28e:	65 e0       	ldi	r22, 0x05	; 5
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	ef d7       	rcall	.+4062   	; 0x1272 <__divmodhi4>
     294:	01 96       	adiw	r24, 0x01	; 1
     296:	9d 83       	std	Y+5, r25	; 0x05
     298:	8c 83       	std	Y+4, r24	; 0x04

			h_index++;			// 인덱스 위치 증가
     29a:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <h_index>
     29e:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <h_index+0x1>
     2a2:	01 96       	adiw	r24, 0x01	; 1
			if(h_index >= 10)
     2a4:	8a 30       	cpi	r24, 0x0A	; 10
     2a6:	91 05       	cpc	r25, r1
     2a8:	2c f4       	brge	.+10     	; 0x2b4 <__vector_15+0x19c>
		if(sec % 3 == 0) {		// 장애물이 3개 생성 되면 하트를 1개 생성하기 위해 sec % 3 == 0 사용
			heart[h_index].x = 15;
			heart[h_index].y = (rand()%128);		// 랜덤한 y의 위치에 장애물을 생성
			heart[h_index].sp = (rand()%5)+1;	// 떨어지는 속도를 다르게 하기 위해 랜덤값 사용

			h_index++;			// 인덱스 위치 증가
     2aa:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <h_index+0x1>
     2ae:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <h_index>
     2b2:	04 c0       	rjmp	.+8      	; 0x2bc <__vector_15+0x1a4>
			if(h_index >= 10)
			h_index = 0;
     2b4:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <h_index+0x1>
     2b8:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <h_index>
		}
	}

}
     2bc:	ff 91       	pop	r31
     2be:	ef 91       	pop	r30
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	bf 91       	pop	r27
     2c6:	af 91       	pop	r26
     2c8:	9f 91       	pop	r25
     2ca:	8f 91       	pop	r24
     2cc:	7f 91       	pop	r23
     2ce:	6f 91       	pop	r22
     2d0:	5f 91       	pop	r21
     2d2:	4f 91       	pop	r20
     2d4:	3f 91       	pop	r19
     2d6:	2f 91       	pop	r18
     2d8:	1f 91       	pop	r17
     2da:	0f 91       	pop	r16
     2dc:	0f 90       	pop	r0
     2de:	0b be       	out	0x3b, r0	; 59
     2e0:	0f 90       	pop	r0
     2e2:	0f be       	out	0x3f, r0	; 63
     2e4:	0f 90       	pop	r0
     2e6:	1f 90       	pop	r1
     2e8:	18 95       	reti

000002ea <__vector_1>:

// 0 Pin Interrupt Routine
ISR(INT0_vect){
     2ea:	1f 92       	push	r1
     2ec:	0f 92       	push	r0
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	0f 92       	push	r0
     2f2:	11 24       	eor	r1, r1
     2f4:	0b b6       	in	r0, 0x3b	; 59
     2f6:	0f 92       	push	r0
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	2f 93       	push	r18
     306:	3f 93       	push	r19
     308:	4f 93       	push	r20
     30a:	5f 93       	push	r21
     30c:	6f 93       	push	r22
     30e:	7f 93       	push	r23
     310:	8f 93       	push	r24
     312:	9f 93       	push	r25
     314:	af 93       	push	r26
     316:	bf 93       	push	r27
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	ef 93       	push	r30
     31e:	ff 93       	push	r31
     320:	c3 e4       	ldi	r28, 0x43	; 67
     322:	d3 e0       	ldi	r29, 0x03	; 3
     324:	0f e7       	ldi	r16, 0x7F	; 127
     326:	13 e0       	ldi	r17, 0x03	; 3

	int i;
	int hit = 0;
     328:	20 e0       	ldi	r18, 0x00	; 0
     32a:	30 e0       	ldi	r19, 0x00	; 0
	for(i = 0; i < 10; i++){
		if(life!=5&&((63 >= heart[i].x) &&(55 <= heart[i].x)&&(Data_ADC4+8 >= heart[i].y) &&(Data_ADC4-8 <= heart[i].y))){
			S_S2();
			life ++;
			score++;
			hit = 1;	// 범위 안에 들어 왔음을 알려줌
     32c:	cc 24       	eor	r12, r12
     32e:	c3 94       	inc	r12
     330:	d1 2c       	mov	r13, r1
	int i;
	int hit = 0;

	// 캐릭터와 하트가 닿는 범위를 계산하여 그 범위 안에 들어왔으면 life를 증가 시킴
	for(i = 0; i < 10; i++){
		if(life!=5&&((63 >= heart[i].x) &&(55 <= heart[i].x)&&(Data_ADC4+8 >= heart[i].y) &&(Data_ADC4-8 <= heart[i].y))){
     332:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <life>
     336:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <life+0x1>
     33a:	05 97       	sbiw	r24, 0x05	; 5
     33c:	81 f1       	breq	.+96     	; 0x39e <__vector_1+0xb4>
     33e:	88 81       	ld	r24, Y
     340:	99 81       	ldd	r25, Y+1	; 0x01
     342:	c7 97       	sbiw	r24, 0x37	; 55
     344:	09 97       	sbiw	r24, 0x09	; 9
     346:	58 f5       	brcc	.+86     	; 0x39e <__vector_1+0xb4>
     348:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <Data_ADC4>
     34c:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <Data_ADC4+0x1>
     350:	4a 81       	ldd	r20, Y+2	; 0x02
     352:	5b 81       	ldd	r21, Y+3	; 0x03
     354:	bc 01       	movw	r22, r24
     356:	68 5f       	subi	r22, 0xF8	; 248
     358:	7f 4f       	sbci	r23, 0xFF	; 255
     35a:	64 17       	cp	r22, r20
     35c:	75 07       	cpc	r23, r21
     35e:	f8 f0       	brcs	.+62     	; 0x39e <__vector_1+0xb4>
     360:	08 97       	sbiw	r24, 0x08	; 8
     362:	48 17       	cp	r20, r24
     364:	59 07       	cpc	r21, r25
     366:	d8 f0       	brcs	.+54     	; 0x39e <__vector_1+0xb4>
			S_S2();
     368:	9b d2       	rcall	.+1334   	; 0x8a0 <S_S2>
			life ++;
     36a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <life>
     36e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <life+0x1>
     372:	01 96       	adiw	r24, 0x01	; 1
     374:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <life+0x1>
     378:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <life>
			score++;
     37c:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <score>
     380:	90 91 3a 03 	lds	r25, 0x033A	; 0x80033a <score+0x1>
     384:	01 96       	adiw	r24, 0x01	; 1
     386:	90 93 3a 03 	sts	0x033A, r25	; 0x80033a <score+0x1>
     38a:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <score>
			hit = 1;	// 범위 안에 들어 왔음을 알려줌
			// 해당 하트를 지움
			heart[i].x = 0;
     38e:	19 82       	std	Y+1, r1	; 0x01
     390:	18 82       	st	Y, r1
			heart[i].y = 0;
     392:	1b 82       	std	Y+3, r1	; 0x03
     394:	1a 82       	std	Y+2, r1	; 0x02
			heart[i].sp = 0;
     396:	1d 82       	std	Y+5, r1	; 0x05
     398:	1c 82       	std	Y+4, r1	; 0x04
	for(i = 0; i < 10; i++){
		if(life!=5&&((63 >= heart[i].x) &&(55 <= heart[i].x)&&(Data_ADC4+8 >= heart[i].y) &&(Data_ADC4-8 <= heart[i].y))){
			S_S2();
			life ++;
			score++;
			hit = 1;	// 범위 안에 들어 왔음을 알려줌
     39a:	2c 2d       	mov	r18, r12
     39c:	3d 2d       	mov	r19, r13
     39e:	26 96       	adiw	r28, 0x06	; 6

	int i;
	int hit = 0;

	// 캐릭터와 하트가 닿는 범위를 계산하여 그 범위 안에 들어왔으면 life를 증가 시킴
	for(i = 0; i < 10; i++){
     3a0:	c0 17       	cp	r28, r16
     3a2:	d1 07       	cpc	r29, r17
     3a4:	31 f6       	brne	.-116    	; 0x332 <__vector_1+0x48>
			heart[i].y = 0;
			heart[i].sp = 0;
		}
	}
	// 범위 안에 들어오지 않았을 경우
	if(hit == 0){
     3a6:	23 2b       	or	r18, r19
     3a8:	49 f4       	brne	.+18     	; 0x3bc <__vector_1+0xd2>
		life--;		// 생명력을 1 감소시킴.
     3aa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <life>
     3ae:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <life+0x1>
     3b2:	01 97       	sbiw	r24, 0x01	; 1
     3b4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <life+0x1>
     3b8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <life>

	}

	// 생명력이 0이 된 경우
	if(life == 0){
     3bc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <life>
     3c0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <life+0x1>
     3c4:	89 2b       	or	r24, r25
     3c6:	31 f4       	brne	.+12     	; 0x3d4 <__vector_1+0xea>
		PORTB = 0xff;		// LED를 모두 꺼줌
     3c8:	8f ef       	ldi	r24, 0xFF	; 255
     3ca:	88 bb       	out	0x18, r24	; 24
		S_S6();				// Buzzer를 울림
     3cc:	74 d2       	rcall	.+1256   	; 0x8b6 <S_S6>
		isGameOver = true;		// Game이 끝났음을 알림
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <__data_end>
	}

}
     3d4:	ff 91       	pop	r31
     3d6:	ef 91       	pop	r30
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	bf 91       	pop	r27
     3de:	af 91       	pop	r26
     3e0:	9f 91       	pop	r25
     3e2:	8f 91       	pop	r24
     3e4:	7f 91       	pop	r23
     3e6:	6f 91       	pop	r22
     3e8:	5f 91       	pop	r21
     3ea:	4f 91       	pop	r20
     3ec:	3f 91       	pop	r19
     3ee:	2f 91       	pop	r18
     3f0:	1f 91       	pop	r17
     3f2:	0f 91       	pop	r16
     3f4:	ff 90       	pop	r15
     3f6:	ef 90       	pop	r14
     3f8:	df 90       	pop	r13
     3fa:	cf 90       	pop	r12
     3fc:	0f 90       	pop	r0
     3fe:	0b be       	out	0x3b, r0	; 59
     400:	0f 90       	pop	r0
     402:	0f be       	out	0x3f, r0	; 63
     404:	0f 90       	pop	r0
     406:	1f 90       	pop	r1
     408:	18 95       	reti

0000040a <__vector_2>:

// 1 Pin Interrupt Routine
ISR(INT1_vect){
     40a:	1f 92       	push	r1
     40c:	0f 92       	push	r0
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	0f 92       	push	r0
     412:	11 24       	eor	r1, r1
     414:	0b b6       	in	r0, 0x3b	; 59
     416:	0f 92       	push	r0
     418:	2f 93       	push	r18
     41a:	3f 93       	push	r19
     41c:	4f 93       	push	r20
     41e:	5f 93       	push	r21
     420:	6f 93       	push	r22
     422:	7f 93       	push	r23
     424:	8f 93       	push	r24
     426:	9f 93       	push	r25
     428:	af 93       	push	r26
     42a:	bf 93       	push	r27
     42c:	ef 93       	push	r30
     42e:	ff 93       	push	r31
	// 모든 변수를 초기화 시키고, LCD를 CLEAR 함
	lcd_clear();
     430:	ac d2       	rcall	.+1368   	; 0x98a <lcd_clear>
	S_Start();
     432:	0d d2       	rcall	.+1050   	; 0x84e <S_Start>
	int i;
	isGameOver = false;
     434:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <__data_end>
	life = 5;
     438:	85 e0       	ldi	r24, 0x05	; 5
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <life+0x1>
     440:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <life>
     444:	ef e7       	ldi	r30, 0x7F	; 127
     446:	f3 e0       	ldi	r31, 0x03	; 3
     448:	87 ef       	ldi	r24, 0xF7	; 247
     44a:	93 e0       	ldi	r25, 0x03	; 3
	for(i = 0 ; i < 20; i ++){
		fall[i].x = 0;
     44c:	11 82       	std	Z+1, r1	; 0x01
     44e:	10 82       	st	Z, r1
		fall[i].y = 0;
     450:	13 82       	std	Z+3, r1	; 0x03
     452:	12 82       	std	Z+2, r1	; 0x02
		fall[i].sp = 0;
     454:	15 82       	std	Z+5, r1	; 0x05
     456:	14 82       	std	Z+4, r1	; 0x04
     458:	36 96       	adiw	r30, 0x06	; 6
	lcd_clear();
	S_Start();
	int i;
	isGameOver = false;
	life = 5;
	for(i = 0 ; i < 20; i ++){
     45a:	e8 17       	cp	r30, r24
     45c:	f9 07       	cpc	r31, r25
     45e:	b1 f7       	brne	.-20     	; 0x44c <__vector_2+0x42>
     460:	e3 e4       	ldi	r30, 0x43	; 67
     462:	f3 e0       	ldi	r31, 0x03	; 3
     464:	8f e7       	ldi	r24, 0x7F	; 127
     466:	93 e0       	ldi	r25, 0x03	; 3
		fall[i].x = 0;
		fall[i].y = 0;
		fall[i].sp = 0;
	}
	for(i = 0; i < 10; i++) {
		heart[i].x = 0;
     468:	11 82       	std	Z+1, r1	; 0x01
     46a:	10 82       	st	Z, r1
		heart[i].y = 0;
     46c:	13 82       	std	Z+3, r1	; 0x03
     46e:	12 82       	std	Z+2, r1	; 0x02
		heart[i].sp = 0;
     470:	15 82       	std	Z+5, r1	; 0x05
     472:	14 82       	std	Z+4, r1	; 0x04
     474:	36 96       	adiw	r30, 0x06	; 6
	for(i = 0 ; i < 20; i ++){
		fall[i].x = 0;
		fall[i].y = 0;
		fall[i].sp = 0;
	}
	for(i = 0; i < 10; i++) {
     476:	e8 17       	cp	r30, r24
     478:	f9 07       	cpc	r31, r25
     47a:	b1 f7       	brne	.-20     	; 0x468 <__vector_2+0x5e>
		heart[i].x = 0;
		heart[i].y = 0;
		heart[i].sp = 0;
	}
	score = 0;
     47c:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <score+0x1>
     480:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <score>
	f_index = 0;
     484:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <f_index+0x1>
     488:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <f_index>
	h_index = 0;
     48c:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <h_index+0x1>
     490:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <h_index>
	sec = 0;
     494:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <sec+0x1>
     498:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <sec>
	cnt = 0;
     49c:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <cnt+0x1>
     4a0:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <cnt>
	
}
     4a4:	ff 91       	pop	r31
     4a6:	ef 91       	pop	r30
     4a8:	bf 91       	pop	r27
     4aa:	af 91       	pop	r26
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	7f 91       	pop	r23
     4b2:	6f 91       	pop	r22
     4b4:	5f 91       	pop	r21
     4b6:	4f 91       	pop	r20
     4b8:	3f 91       	pop	r19
     4ba:	2f 91       	pop	r18
     4bc:	0f 90       	pop	r0
     4be:	0b be       	out	0x3b, r0	; 59
     4c0:	0f 90       	pop	r0
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	0f 90       	pop	r0
     4c6:	1f 90       	pop	r1
     4c8:	18 95       	reti

000004ca <GLCD_Heart>:

// Show Heart Pixel
void GLCD_Heart(int x1, int y1){
     4ca:	8f 92       	push	r8
     4cc:	9f 92       	push	r9
     4ce:	af 92       	push	r10
     4d0:	bf 92       	push	r11
     4d2:	cf 92       	push	r12
     4d4:	df 92       	push	r13
     4d6:	ef 92       	push	r14
     4d8:	ff 92       	push	r15
     4da:	0f 93       	push	r16
     4dc:	1f 93       	push	r17
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	f8 2e       	mov	r15, r24
     4e4:	06 2f       	mov	r16, r22
     4e6:	1e ef       	ldi	r17, 0xFE	; 254
     4e8:	18 0f       	add	r17, r24
	int i;
	// GLCD_Dot 을 이용해 Heart Pixel 을 찍음
	for(i = 0; i < 5; i++){
     4ea:	c0 e0       	ldi	r28, 0x00	; 0
     4ec:	d0 e0       	ldi	r29, 0x00	; 0
		if(i == 0){
			GLCD_Dot(x1-2, y1-1);
     4ee:	b1 2e       	mov	r11, r17
     4f0:	cc 24       	eor	r12, r12
     4f2:	ca 94       	dec	r12
     4f4:	c6 0e       	add	r12, r22
			GLCD_Dot(x1-2, y1+1);
     4f6:	dd 24       	eor	r13, r13
     4f8:	d3 94       	inc	r13
     4fa:	d6 0e       	add	r13, r22
			for(j = 0; j<5; j++){
				GLCD_Dot(x1-cnt, y1-2+j);
			}
		}
		if(i == 3){
			GLCD_Dot(x1+1,y1-1);
     4fc:	ee 24       	eor	r14, r14
     4fe:	e3 94       	inc	r14
     500:	e8 0e       	add	r14, r24
     502:	91 2c       	mov	r9, r1
     504:	0f 2e       	mov	r0, r31
     506:	fe ef       	ldi	r31, 0xFE	; 254
     508:	af 2e       	mov	r10, r31
     50a:	f0 2d       	mov	r31, r0
     50c:	a6 0e       	add	r10, r22
// Show Heart Pixel
void GLCD_Heart(int x1, int y1){
	int i;
	// GLCD_Dot 을 이용해 Heart Pixel 을 찍음
	for(i = 0; i < 5; i++){
		if(i == 0){
     50e:	20 97       	sbiw	r28, 0x00	; 0
     510:	39 f4       	brne	.+14     	; 0x520 <GLCD_Heart+0x56>
			GLCD_Dot(x1-2, y1-1);
     512:	6c 2d       	mov	r22, r12
     514:	8b 2d       	mov	r24, r11
     516:	c3 d2       	rcall	.+1414   	; 0xa9e <GLCD_Dot>
			GLCD_Dot(x1-2, y1+1);
     518:	6d 2d       	mov	r22, r13
     51a:	8b 2d       	mov	r24, r11
     51c:	c0 d2       	rcall	.+1408   	; 0xa9e <GLCD_Dot>
     51e:	26 c0       	rjmp	.+76     	; 0x56c <GLCD_Heart+0xa2>
     520:	9e 01       	movw	r18, r28
     522:	21 50       	subi	r18, 0x01	; 1
     524:	31 09       	sbc	r19, r1
		}
		if(i ==1 || i == 2){
     526:	22 30       	cpi	r18, 0x02	; 2
     528:	31 05       	cpc	r19, r1
     52a:	48 f4       	brcc	.+18     	; 0x53e <GLCD_Heart+0x74>
     52c:	89 2c       	mov	r8, r9
     52e:	6a 2d       	mov	r22, r10
     530:	68 0d       	add	r22, r8
			int j;
			int cnt = 2-i;
			for(j = 0; j<5; j++){
				GLCD_Dot(x1-cnt, y1-2+j);
     532:	81 2f       	mov	r24, r17
     534:	b4 d2       	rcall	.+1384   	; 0xa9e <GLCD_Dot>
     536:	83 94       	inc	r8
			GLCD_Dot(x1-2, y1+1);
		}
		if(i ==1 || i == 2){
			int j;
			int cnt = 2-i;
			for(j = 0; j<5; j++){
     538:	85 e0       	ldi	r24, 0x05	; 5
     53a:	88 12       	cpse	r8, r24
     53c:	f8 cf       	rjmp	.-16     	; 0x52e <GLCD_Heart+0x64>
				GLCD_Dot(x1-cnt, y1-2+j);
			}
		}
		if(i == 3){
     53e:	c3 30       	cpi	r28, 0x03	; 3
     540:	d1 05       	cpc	r29, r1
     542:	61 f4       	brne	.+24     	; 0x55c <GLCD_Heart+0x92>
			GLCD_Dot(x1+1,y1-1);
     544:	6c 2d       	mov	r22, r12
     546:	8e 2d       	mov	r24, r14
     548:	aa d2       	rcall	.+1364   	; 0xa9e <GLCD_Dot>
			GLCD_Dot(x1+1, y1);
     54a:	60 2f       	mov	r22, r16
     54c:	8e 2d       	mov	r24, r14
     54e:	a7 d2       	rcall	.+1358   	; 0xa9e <GLCD_Dot>
			GLCD_Dot(x1+1, y1+1);
     550:	6d 2d       	mov	r22, r13
     552:	8e 2d       	mov	r24, r14
     554:	a4 d2       	rcall	.+1352   	; 0xa9e <GLCD_Dot>

// Show Heart Pixel
void GLCD_Heart(int x1, int y1){
	int i;
	// GLCD_Dot 을 이용해 Heart Pixel 을 찍음
	for(i = 0; i < 5; i++){
     556:	21 96       	adiw	r28, 0x01	; 1
     558:	1f 5f       	subi	r17, 0xFF	; 255
     55a:	d9 cf       	rjmp	.-78     	; 0x50e <GLCD_Heart+0x44>
		if(i == 3){
			GLCD_Dot(x1+1,y1-1);
			GLCD_Dot(x1+1, y1);
			GLCD_Dot(x1+1, y1+1);
		}
		if(i == 4){
     55c:	c4 30       	cpi	r28, 0x04	; 4
     55e:	d1 05       	cpc	r29, r1
     560:	29 f4       	brne	.+10     	; 0x56c <GLCD_Heart+0xa2>
			GLCD_Dot(x1+2, y1);
     562:	60 2f       	mov	r22, r16
     564:	82 e0       	ldi	r24, 0x02	; 2
     566:	8f 0d       	add	r24, r15
     568:	9a d2       	rcall	.+1332   	; 0xa9e <GLCD_Dot>
     56a:	05 c0       	rjmp	.+10     	; 0x576 <GLCD_Heart+0xac>

// Show Heart Pixel
void GLCD_Heart(int x1, int y1){
	int i;
	// GLCD_Dot 을 이용해 Heart Pixel 을 찍음
	for(i = 0; i < 5; i++){
     56c:	21 96       	adiw	r28, 0x01	; 1
     56e:	1f 5f       	subi	r17, 0xFF	; 255
     570:	c5 30       	cpi	r28, 0x05	; 5
     572:	d1 05       	cpc	r29, r1
     574:	61 f6       	brne	.-104    	; 0x50e <GLCD_Heart+0x44>
		if(i == 4){
			GLCD_Dot(x1+2, y1);
		}
	}
	
}
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	1f 91       	pop	r17
     57c:	0f 91       	pop	r16
     57e:	ff 90       	pop	r15
     580:	ef 90       	pop	r14
     582:	df 90       	pop	r13
     584:	cf 90       	pop	r12
     586:	bf 90       	pop	r11
     588:	af 90       	pop	r10
     58a:	9f 90       	pop	r9
     58c:	8f 90       	pop	r8
     58e:	08 95       	ret

00000590 <Show_Screen>:

// Show LCD
void Show_Screen(void) {
     590:	0f 93       	push	r16
     592:	1f 93       	push	r17
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
	int i;

	// 3자리의 점수를 띄움
	lcd_string(0,50,"Score : ");
     598:	41 ee       	ldi	r20, 0xE1	; 225
     59a:	52 e0       	ldi	r21, 0x02	; 2
     59c:	62 e3       	ldi	r22, 0x32	; 50
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	52 d2       	rcall	.+1188   	; 0xa46 <lcd_string>
	lcd_xy(0,60);
     5a2:	6c e3       	ldi	r22, 0x3C	; 60
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	0c d2       	rcall	.+1048   	; 0x9c0 <lcd_xy>
	GLCD_3DigitDecimal(score);
     5a8:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <score>
     5ac:	90 91 3a 03 	lds	r25, 0x033A	; 0x80033a <score+0x1>
     5b0:	7a d4       	rcall	.+2292   	; 0xea6 <GLCD_3DigitDecimal>

	// 남은 생명력의 갯수를 띄움
	for(i = 0; i<life; i++){
     5b2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <life>
     5b6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <life+0x1>
     5ba:	18 16       	cp	r1, r24
     5bc:	19 06       	cpc	r1, r25
     5be:	9c f4       	brge	.+38     	; 0x5e6 <Show_Screen+0x56>
     5c0:	c1 e0       	ldi	r28, 0x01	; 1
     5c2:	d0 e0       	ldi	r29, 0x00	; 0
		lcd_xy(0,i+1);
     5c4:	6c 2f       	mov	r22, r28
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	fb d1       	rcall	.+1014   	; 0x9c0 <lcd_xy>
		lcd_char('*');
     5ca:	8a e2       	ldi	r24, 0x2A	; 42
     5cc:	13 d2       	rcall	.+1062   	; 0x9f4 <lcd_char>
		lcd_xy(0,0);
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	f6 d1       	rcall	.+1004   	; 0x9c0 <lcd_xy>
	lcd_string(0,50,"Score : ");
	lcd_xy(0,60);
	GLCD_3DigitDecimal(score);

	// 남은 생명력의 갯수를 띄움
	for(i = 0; i<life; i++){
     5d4:	ce 01       	movw	r24, r28
     5d6:	21 96       	adiw	r28, 0x01	; 1
     5d8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <life>
     5dc:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <life+0x1>
     5e0:	82 17       	cp	r24, r18
     5e2:	93 07       	cpc	r25, r19
     5e4:	7c f3       	brlt	.-34     	; 0x5c4 <Show_Screen+0x34>
	}

	unsigned char led = 0xff;

	// LED를 이용해 남은 생명럭의 갯수를 밝힘
	for(i = 0; i <= life; i++) {
     5e6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <life>
     5ea:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <life+0x1>
     5ee:	99 23       	and	r25, r25
     5f0:	6c f0       	brlt	.+26     	; 0x60c <Show_Screen+0x7c>
     5f2:	2f ef       	ldi	r18, 0xFF	; 255
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
		PORTB = led;
     5f8:	28 bb       	out	0x18, r18	; 24
		led <<= 1;
     5fa:	22 0f       	add	r18, r18
	}

	unsigned char led = 0xff;

	// LED를 이용해 남은 생명럭의 갯수를 밝힘
	for(i = 0; i <= life; i++) {
     5fc:	01 96       	adiw	r24, 0x01	; 1
     5fe:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <life>
     602:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <life+0x1>
     606:	48 17       	cp	r20, r24
     608:	59 07       	cpc	r21, r25
     60a:	b4 f7       	brge	.-20     	; 0x5f8 <Show_Screen+0x68>
		PORTB = led;
		led <<= 1;
	}

	GLCD_Rectangle(63,Data_ADC4,55,Data_ADC4+8); // 캐릭터 위치 출력
     60c:	60 91 41 03 	lds	r22, 0x0341	; 0x800341 <Data_ADC4>
     610:	28 e0       	ldi	r18, 0x08	; 8
     612:	26 0f       	add	r18, r22
     614:	47 e3       	ldi	r20, 0x37	; 55
     616:	8f e3       	ldi	r24, 0x3F	; 63
     618:	3c d3       	rcall	.+1656   	; 0xc92 <GLCD_Rectangle>
     61a:	cf e7       	ldi	r28, 0x7F	; 127
     61c:	d3 e0       	ldi	r29, 0x03	; 3
     61e:	07 ef       	ldi	r16, 0xF7	; 247
     620:	13 e0       	ldi	r17, 0x03	; 3

	for(i = 0; i < 20; i++){
		if(fall[i].x!=0 && fall[i].y!= 0)
     622:	88 81       	ld	r24, Y
     624:	99 81       	ldd	r25, Y+1	; 0x01
     626:	00 97       	sbiw	r24, 0x00	; 0
     628:	69 f0       	breq	.+26     	; 0x644 <Show_Screen+0xb4>
     62a:	6a 81       	ldd	r22, Y+2	; 0x02
     62c:	7b 81       	ldd	r23, Y+3	; 0x03
     62e:	61 15       	cp	r22, r1
     630:	71 05       	cpc	r23, r1
     632:	41 f0       	breq	.+16     	; 0x644 <Show_Screen+0xb4>
			GLCD_Circle(fall[i].x+=fall[i].sp,fall[i].y,2); // 장애물 위치 출력
     634:	2c 81       	ldd	r18, Y+4	; 0x04
     636:	3d 81       	ldd	r19, Y+5	; 0x05
     638:	82 0f       	add	r24, r18
     63a:	93 1f       	adc	r25, r19
     63c:	99 83       	std	Y+1, r25	; 0x01
     63e:	88 83       	st	Y, r24
     640:	42 e0       	ldi	r20, 0x02	; 2
     642:	45 d3       	rcall	.+1674   	; 0xcce <GLCD_Circle>
     644:	26 96       	adiw	r28, 0x06	; 6
		led <<= 1;
	}

	GLCD_Rectangle(63,Data_ADC4,55,Data_ADC4+8); // 캐릭터 위치 출력

	for(i = 0; i < 20; i++){
     646:	c0 17       	cp	r28, r16
     648:	d1 07       	cpc	r29, r17
     64a:	59 f7       	brne	.-42     	; 0x622 <Show_Screen+0x92>
     64c:	c3 e4       	ldi	r28, 0x43	; 67
     64e:	d3 e0       	ldi	r29, 0x03	; 3
     650:	0f e7       	ldi	r16, 0x7F	; 127
     652:	13 e0       	ldi	r17, 0x03	; 3
		if(fall[i].x!=0 && fall[i].y!= 0)
			GLCD_Circle(fall[i].x+=fall[i].sp,fall[i].y,2); // 장애물 위치 출력
	}

	for(i = 0; i < 10; i++) {
		if(heart[i].x!=0 && heart[i].y!= 0)
     654:	88 81       	ld	r24, Y
     656:	99 81       	ldd	r25, Y+1	; 0x01
     658:	00 97       	sbiw	r24, 0x00	; 0
     65a:	61 f0       	breq	.+24     	; 0x674 <Show_Screen+0xe4>
     65c:	6a 81       	ldd	r22, Y+2	; 0x02
     65e:	7b 81       	ldd	r23, Y+3	; 0x03
     660:	61 15       	cp	r22, r1
     662:	71 05       	cpc	r23, r1
     664:	39 f0       	breq	.+14     	; 0x674 <Show_Screen+0xe4>
			GLCD_Heart(heart[i].x+=heart[i].sp,heart[i].y); // 하트 위치 출력
     666:	2c 81       	ldd	r18, Y+4	; 0x04
     668:	3d 81       	ldd	r19, Y+5	; 0x05
     66a:	82 0f       	add	r24, r18
     66c:	93 1f       	adc	r25, r19
     66e:	99 83       	std	Y+1, r25	; 0x01
     670:	88 83       	st	Y, r24
     672:	2b df       	rcall	.-426    	; 0x4ca <GLCD_Heart>
     674:	26 96       	adiw	r28, 0x06	; 6
	for(i = 0; i < 20; i++){
		if(fall[i].x!=0 && fall[i].y!= 0)
			GLCD_Circle(fall[i].x+=fall[i].sp,fall[i].y,2); // 장애물 위치 출력
	}

	for(i = 0; i < 10; i++) {
     676:	c0 17       	cp	r28, r16
     678:	d1 07       	cpc	r29, r17
     67a:	61 f7       	brne	.-40     	; 0x654 <Show_Screen+0xc4>
		if(heart[i].x!=0 && heart[i].y!= 0)
			GLCD_Heart(heart[i].x+=heart[i].sp,heart[i].y); // 하트 위치 출력
	}

}
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	08 95       	ret

00000686 <IsTouch>:

// IsTough the falling fall
void IsTouch(void) {
     686:	cf 93       	push	r28
     688:	df 93       	push	r29

	int i;

	// 캐릭터와 장애물이 닿는 범위를 계산하여 그 범위 안에 들어왔으면 life를 감소 시킴
	for(i = 0; i < 20; i++){
		if((((63 >= fall[i].x) &&(55 <= fall[i].x)&&(Data_ADC4+8 >= fall[i].y) &&(Data_ADC4-8 <= fall[i].y)))){
     68a:	60 91 41 03 	lds	r22, 0x0341	; 0x800341 <Data_ADC4>
     68e:	70 91 42 03 	lds	r23, 0x0342	; 0x800342 <Data_ADC4+0x1>
     692:	ab 01       	movw	r20, r22
     694:	48 5f       	subi	r20, 0xF8	; 248
     696:	5f 4f       	sbci	r21, 0xFF	; 255
     698:	68 50       	subi	r22, 0x08	; 8
     69a:	71 09       	sbc	r23, r1
     69c:	c0 91 04 01 	lds	r28, 0x0104	; 0x800104 <life>
     6a0:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <life+0x1>
     6a4:	ef e7       	ldi	r30, 0x7F	; 127
     6a6:	f3 e0       	ldi	r31, 0x03	; 3
     6a8:	27 ef       	ldi	r18, 0xF7	; 247
     6aa:	33 e0       	ldi	r19, 0x03	; 3
     6ac:	80 81       	ld	r24, Z
     6ae:	91 81       	ldd	r25, Z+1	; 0x01
     6b0:	c7 97       	sbiw	r24, 0x37	; 55
     6b2:	09 97       	sbiw	r24, 0x09	; 9
     6b4:	78 f4       	brcc	.+30     	; 0x6d4 <IsTouch+0x4e>
     6b6:	82 81       	ldd	r24, Z+2	; 0x02
     6b8:	93 81       	ldd	r25, Z+3	; 0x03
     6ba:	48 17       	cp	r20, r24
     6bc:	59 07       	cpc	r21, r25
     6be:	50 f0       	brcs	.+20     	; 0x6d4 <IsTouch+0x4e>
     6c0:	86 17       	cp	r24, r22
     6c2:	97 07       	cpc	r25, r23
     6c4:	38 f0       	brcs	.+14     	; 0x6d4 <IsTouch+0x4e>
			life --;
     6c6:	21 97       	sbiw	r28, 0x01	; 1
			fall[i].x = 0;
     6c8:	11 82       	std	Z+1, r1	; 0x01
     6ca:	10 82       	st	Z, r1
			fall[i].y = 0;
     6cc:	13 82       	std	Z+3, r1	; 0x03
     6ce:	12 82       	std	Z+2, r1	; 0x02
			fall[i].sp = 0;
     6d0:	15 82       	std	Z+5, r1	; 0x05
     6d2:	14 82       	std	Z+4, r1	; 0x04
     6d4:	36 96       	adiw	r30, 0x06	; 6
void IsTouch(void) {

	int i;

	// 캐릭터와 장애물이 닿는 범위를 계산하여 그 범위 안에 들어왔으면 life를 감소 시킴
	for(i = 0; i < 20; i++){
     6d6:	e2 17       	cp	r30, r18
     6d8:	f3 07       	cpc	r31, r19
     6da:	41 f7       	brne	.-48     	; 0x6ac <IsTouch+0x26>
     6dc:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <life+0x1>
     6e0:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <life>
		}
	}


	// 생명력이 0이 된 경우
	if(life == 0) {
     6e4:	cd 2b       	or	r28, r29
     6e6:	31 f4       	brne	.+12     	; 0x6f4 <IsTouch+0x6e>
		PORTB = 0xff;		// LED를 모두 꺼줌
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	88 bb       	out	0x18, r24	; 24
		S_S6();				// Buzzer를 울림
     6ec:	e4 d0       	rcall	.+456    	; 0x8b6 <S_S6>
		isGameOver = true;		// Game이 끝났음을 알림
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <__data_end>
	}

}
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <SquareScared>:

// Game start screen
void SquareScared(void){
	lcd_string(2,3,"==============");
     6fa:	4a ee       	ldi	r20, 0xEA	; 234
     6fc:	52 e0       	ldi	r21, 0x02	; 2
     6fe:	63 e0       	ldi	r22, 0x03	; 3
     700:	82 e0       	ldi	r24, 0x02	; 2
     702:	a1 d1       	rcall	.+834    	; 0xa46 <lcd_string>
	lcd_string(3,3,"Square Scared");
     704:	49 ef       	ldi	r20, 0xF9	; 249
     706:	52 e0       	ldi	r21, 0x02	; 2
     708:	63 e0       	ldi	r22, 0x03	; 3
     70a:	83 e0       	ldi	r24, 0x03	; 3
     70c:	9c d1       	rcall	.+824    	; 0xa46 <lcd_string>
	lcd_string(4,3,"==============");
     70e:	4a ee       	ldi	r20, 0xEA	; 234
     710:	52 e0       	ldi	r21, 0x02	; 2
     712:	63 e0       	ldi	r22, 0x03	; 3
     714:	84 e0       	ldi	r24, 0x04	; 4
     716:	97 c1       	rjmp	.+814    	; 0xa46 <lcd_string>
     718:	08 95       	ret

0000071a <main>:
}

int main(void){

	init_devices();  // 디바이스 초기화
     71a:	f7 dc       	rcall	.-1554   	; 0x10a <init_devices>
	lcd_clear();
     71c:	36 d1       	rcall	.+620    	; 0x98a <lcd_clear>
	SquareScared();
     71e:	ed df       	rcall	.-38     	; 0x6fa <SquareScared>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     720:	2f ef       	ldi	r18, 0xFF	; 255
     722:	8f ef       	ldi	r24, 0xFF	; 255
     724:	9d e7       	ldi	r25, 0x7D	; 125
     726:	21 50       	subi	r18, 0x01	; 1
     728:	80 40       	sbci	r24, 0x00	; 0
     72a:	90 40       	sbci	r25, 0x00	; 0
     72c:	e1 f7       	brne	.-8      	; 0x726 <main+0xc>
     72e:	00 c0       	rjmp	.+0      	; 0x730 <main+0x16>
     730:	00 00       	nop
	_delay_ms(2800);
	S_Start();
     732:	8d d0       	rcall	.+282    	; 0x84e <S_Start>
	while(1){
		Data_ADC4 = Read_Adc_Data(4) / 8; // 아날로그 0번 포트 읽기
     734:	84 e0       	ldi	r24, 0x04	; 4
     736:	41 d0       	rcall	.+130    	; 0x7ba <Read_Adc_Data>
     738:	96 95       	lsr	r25
     73a:	87 95       	ror	r24
     73c:	96 95       	lsr	r25
     73e:	87 95       	ror	r24
     740:	96 95       	lsr	r25
     742:	87 95       	ror	r24
     744:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <Data_ADC4+0x1>
     748:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <Data_ADC4>
     74c:	2f ef       	ldi	r18, 0xFF	; 255
     74e:	8f e7       	ldi	r24, 0x7F	; 127
     750:	94 e0       	ldi	r25, 0x04	; 4
     752:	21 50       	subi	r18, 0x01	; 1
     754:	80 40       	sbci	r24, 0x00	; 0
     756:	90 40       	sbci	r25, 0x00	; 0
     758:	e1 f7       	brne	.-8      	; 0x752 <main+0x38>
     75a:	00 c0       	rjmp	.+0      	; 0x75c <main+0x42>
     75c:	00 00       	nop
		_delay_ms(100); // 딜레이 200ms
		lcd_clear(); // 그래픽 LCD 클리어
     75e:	15 d1       	rcall	.+554    	; 0x98a <lcd_clear>
		ScreenBuffer_clear(); // 스크린 버퍼 클리어
     760:	fe d1       	rcall	.+1020   	; 0xb5e <ScreenBuffer_clear>

		// 게임이 종료됨
		if(isGameOver) {
     762:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <__data_end>
     766:	88 23       	and	r24, r24
     768:	f1 f0       	breq	.+60     	; 0x7a6 <main+0x8c>
			init_devices(); // 디바이스 초기화
     76a:	cf dc       	rcall	.-1634   	; 0x10a <init_devices>
			lcd_string(2,0,"Game Over");
     76c:	47 e0       	ldi	r20, 0x07	; 7
     76e:	53 e0       	ldi	r21, 0x03	; 3
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	68 d1       	rcall	.+720    	; 0xa46 <lcd_string>
			lcd_string(3,0,"Game Over");
     776:	47 e0       	ldi	r20, 0x07	; 7
     778:	53 e0       	ldi	r21, 0x03	; 3
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	83 e0       	ldi	r24, 0x03	; 3
     77e:	63 d1       	rcall	.+710    	; 0xa46 <lcd_string>

			// 점수를 알려줌
			lcd_string(4,0,"Your score : ");
     780:	41 e1       	ldi	r20, 0x11	; 17
     782:	53 e0       	ldi	r21, 0x03	; 3
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	84 e0       	ldi	r24, 0x04	; 4
     788:	5e d1       	rcall	.+700    	; 0xa46 <lcd_string>
			lcd_xy(4,10);
     78a:	6a e0       	ldi	r22, 0x0A	; 10
     78c:	84 e0       	ldi	r24, 0x04	; 4
     78e:	18 d1       	rcall	.+560    	; 0x9c0 <lcd_xy>
			GLCD_3DigitDecimal(score);
     790:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <score>
     794:	90 91 3a 03 	lds	r25, 0x033A	; 0x80033a <score+0x1>
     798:	86 d3       	rcall	.+1804   	; 0xea6 <GLCD_3DigitDecimal>

			// 1번 Pin을 누르면 재시작 함
			lcd_string(5,0,"Press 1Pin to Restart");
     79a:	4f e1       	ldi	r20, 0x1F	; 31
     79c:	53 e0       	ldi	r21, 0x03	; 3
     79e:	60 e0       	ldi	r22, 0x00	; 0
     7a0:	85 e0       	ldi	r24, 0x05	; 5
     7a2:	51 d1       	rcall	.+674    	; 0xa46 <lcd_string>
     7a4:	c7 cf       	rjmp	.-114    	; 0x734 <main+0x1a>
		}

		// 게임이 끝나지 않음
		else {
			Show_Screen();	// 게임 화면을 띄움
     7a6:	f4 de       	rcall	.-536    	; 0x590 <Show_Screen>
			IsTouch();		// 장애물과 닿았는지 확인함
     7a8:	6e df       	rcall	.-292    	; 0x686 <IsTouch>
     7aa:	c4 cf       	rjmp	.-120    	; 0x734 <main+0x1a>

000007ac <Adc_init>:
#define ADC_2_56_TYPE 0xC0      // A/D 컨버터 사용 기준 전압  2.56 설정

//ADC initialize
void Adc_init(void)
{
	ADCSRA = 0x00;	// disable adc
     7ac:	16 b8       	out	0x06, r1	; 6
	ADMUX  = 0x00; 	// select adc input 0
     7ae:	17 b8       	out	0x07, r1	; 7
	ACSR   = 0x80;	//
     7b0:	80 e8       	ldi	r24, 0x80	; 128
     7b2:	88 b9       	out	0x08, r24	; 8
	ADCSRA = 0xC3;	// Conversion time: 6uS
     7b4:	83 ec       	ldi	r24, 0xC3	; 195
     7b6:	86 b9       	out	0x06, r24	; 6
     7b8:	08 95       	ret

000007ba <Read_Adc_Data>:
}
unsigned int Read_Adc_Data(unsigned char adc_input)   // ADC  읽어 들이기
{	unsigned int adc = 0;
	ADCSRA = 0xC3;    // Conversion time: 6uS
     7ba:	93 ec       	ldi	r25, 0xC3	; 195
     7bc:	96 b9       	out	0x06, r25	; 6
	//CLI();
	ADMUX = adc_input | ADC_AVCC_TYPE ;      // adc  사용 핀 설정
     7be:	80 64       	ori	r24, 0x40	; 64
     7c0:	87 b9       	out	0x07, r24	; 7
	//ADMUX.3 = 1;
	ADCSRA |= 0x40;                            // Wait for the AD conversion to complete
     7c2:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & 0x10) != 0x10);
     7c4:	34 9b       	sbis	0x06, 4	; 6
     7c6:	fe cf       	rjmp	.-4      	; 0x7c4 <Read_Adc_Data+0xa>
	adc += ADCL + ( ADCH * 256 );
     7c8:	24 b1       	in	r18, 0x04	; 4
     7ca:	85 b1       	in	r24, 0x05	; 5
	//SEI();
	ADCSRA = 0x00;
     7cc:	16 b8       	out	0x06, r1	; 6
	//CLI();
	ADMUX = adc_input | ADC_AVCC_TYPE ;      // adc  사용 핀 설정
	//ADMUX.3 = 1;
	ADCSRA |= 0x40;                            // Wait for the AD conversion to complete
	while((ADCSRA & 0x10) != 0x10);
	adc += ADCL + ( ADCH * 256 );
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	98 2f       	mov	r25, r24
     7d2:	88 27       	eor	r24, r24
	//SEI();
	ADCSRA = 0x00;
	return adc;
}
     7d4:	82 0f       	add	r24, r18
     7d6:	91 1d       	adc	r25, r1
     7d8:	08 95       	ret

000007da <delay_us_Melody>:
}
void S_S1()    {    Sound(BB,BDo);    Sound(BB,BMi);    Sound(BB,BSo);    Sound(BB,HDo);    }
void S_S2()    {    Sound(BB,HDo);    Sound(BB,HMi);                                        }
void S_S3()    {    Sound(BB,LDo);                                                          }
void S_S4()    {    Sound(BB,BDo);    Sound(BB,BMi);    Sound(BB,BSo);                      }
void S_S5()    {    Sound(BB,BDo);    Sound(BB,BMi);                          }
     7da:	18 16       	cp	r1, r24
     7dc:	19 06       	cpc	r1, r25
     7de:	54 f4       	brge	.+20     	; 0x7f4 <delay_us_Melody+0x1a>
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	45 e0       	ldi	r20, 0x05	; 5
     7e6:	4a 95       	dec	r20
     7e8:	f1 f7       	brne	.-4      	; 0x7e6 <delay_us_Melody+0xc>
     7ea:	2f 5f       	subi	r18, 0xFF	; 255
     7ec:	3f 4f       	sbci	r19, 0xFF	; 255
     7ee:	28 17       	cp	r18, r24
     7f0:	39 07       	cpc	r19, r25
     7f2:	c1 f7       	brne	.-16     	; 0x7e4 <delay_us_Melody+0xa>
     7f4:	08 95       	ret

000007f6 <Sound>:
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	7b 01       	movw	r14, r22
     804:	28 ee       	ldi	r18, 0xE8	; 232
     806:	33 e0       	ldi	r19, 0x03	; 3
     808:	ac 01       	movw	r20, r24
     80a:	42 9f       	mul	r20, r18
     80c:	c0 01       	movw	r24, r0
     80e:	43 9f       	mul	r20, r19
     810:	90 0d       	add	r25, r0
     812:	52 9f       	mul	r21, r18
     814:	90 0d       	add	r25, r0
     816:	11 24       	eor	r1, r1
     818:	18 d5       	rcall	.+2608   	; 0x124a <__udivmodhi4>
     81a:	61 15       	cp	r22, r1
     81c:	71 05       	cpc	r23, r1
     81e:	81 f0       	breq	.+32     	; 0x840 <Sound+0x4a>
     820:	8b 01       	movw	r16, r22
     822:	c5 e6       	ldi	r28, 0x65	; 101
     824:	d0 e0       	ldi	r29, 0x00	; 0
     826:	98 81       	ld	r25, Y
     828:	90 61       	ori	r25, 0x10	; 16
     82a:	98 83       	st	Y, r25
     82c:	c7 01       	movw	r24, r14
     82e:	d5 df       	rcall	.-86     	; 0x7da <delay_us_Melody>
     830:	98 81       	ld	r25, Y
     832:	9f 7e       	andi	r25, 0xEF	; 239
     834:	98 83       	st	Y, r25
     836:	c7 01       	movw	r24, r14
     838:	d0 df       	rcall	.-96     	; 0x7da <delay_us_Melody>
     83a:	01 50       	subi	r16, 0x01	; 1
     83c:	11 09       	sbc	r17, r1
     83e:	99 f7       	brne	.-26     	; 0x826 <Sound+0x30>
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	ff 90       	pop	r15
     84a:	ef 90       	pop	r14
     84c:	08 95       	ret

0000084e <S_Start>:
     84e:	65 e6       	ldi	r22, 0x65	; 101
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	83 e2       	ldi	r24, 0x23	; 35
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	cf df       	rcall	.-98     	; 0x7f6 <Sound>
     858:	6a e5       	ldi	r22, 0x5A	; 90
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	ca df       	rcall	.-108    	; 0x7f6 <Sound>
     862:	60 e5       	ldi	r22, 0x50	; 80
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	83 e2       	ldi	r24, 0x23	; 35
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	c5 df       	rcall	.-118    	; 0x7f6 <Sound>
     86c:	6c e4       	ldi	r22, 0x4C	; 76
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	8e e1       	ldi	r24, 0x1E	; 30
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	c0 df       	rcall	.-128    	; 0x7f6 <Sound>
     876:	64 e4       	ldi	r22, 0x44	; 68
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	83 e2       	ldi	r24, 0x23	; 35
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	bb df       	rcall	.-138    	; 0x7f6 <Sound>
     880:	6d e3       	ldi	r22, 0x3D	; 61
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	8e e1       	ldi	r24, 0x1E	; 30
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	b6 df       	rcall	.-148    	; 0x7f6 <Sound>
     88a:	66 e3       	ldi	r22, 0x36	; 54
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	83 e2       	ldi	r24, 0x23	; 35
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	b1 df       	rcall	.-158    	; 0x7f6 <Sound>
     894:	63 e3       	ldi	r22, 0x33	; 51
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	ac cf       	rjmp	.-168    	; 0x7f6 <Sound>
     89e:	08 95       	ret

000008a0 <S_S2>:
     8a0:	65 e6       	ldi	r22, 0x65	; 101
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	83 e2       	ldi	r24, 0x23	; 35
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	a6 df       	rcall	.-180    	; 0x7f6 <Sound>
     8aa:	60 e5       	ldi	r22, 0x50	; 80
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	83 e2       	ldi	r24, 0x23	; 35
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	a1 cf       	rjmp	.-190    	; 0x7f6 <Sound>
     8b4:	08 95       	ret

000008b6 <S_S6>:
void S_S6()    {    unsigned char i;    for(i=0; i<4; i++)    {    Sound(BB,HSo);    Sound(BB,HDo);    }    }
     8b6:	cf 93       	push	r28
     8b8:	c4 e0       	ldi	r28, 0x04	; 4
     8ba:	64 e4       	ldi	r22, 0x44	; 68
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	83 e2       	ldi	r24, 0x23	; 35
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	99 df       	rcall	.-206    	; 0x7f6 <Sound>
     8c4:	65 e6       	ldi	r22, 0x65	; 101
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	83 e2       	ldi	r24, 0x23	; 35
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	94 df       	rcall	.-216    	; 0x7f6 <Sound>
     8ce:	c1 50       	subi	r28, 0x01	; 1
     8d0:	a1 f7       	brne	.-24     	; 0x8ba <S_S6+0x4>
     8d2:	cf 91       	pop	r28
     8d4:	08 95       	ret

000008d6 <cmndl>:
		number = number % 100;
		i = number/10;
		flag = GLCD_1DigitDecimal(i, flag); // 10^1
		i = number % 10;
		lcd_char(i + '0');              // 10^0
	}
     8d6:	1d 9a       	sbi	0x03, 5	; 3
     8d8:	91 e3       	ldi	r25, 0x31	; 49
     8da:	9a 95       	dec	r25
     8dc:	f1 f7       	brne	.-4      	; 0x8da <cmndl+0x4>
     8de:	00 00       	nop
     8e0:	1c 98       	cbi	0x03, 4	; 3
     8e2:	1e 98       	cbi	0x03, 6	; 3
     8e4:	1f 9a       	sbi	0x03, 7	; 3
     8e6:	8b bb       	out	0x1b, r24	; 27
     8e8:	81 e3       	ldi	r24, 0x31	; 49
     8ea:	8a 95       	dec	r24
     8ec:	f1 f7       	brne	.-4      	; 0x8ea <cmndl+0x14>
     8ee:	00 00       	nop
     8f0:	1d 98       	cbi	0x03, 5	; 3
     8f2:	08 95       	ret

000008f4 <cmndr>:
     8f4:	1d 9a       	sbi	0x03, 5	; 3
     8f6:	91 e3       	ldi	r25, 0x31	; 49
     8f8:	9a 95       	dec	r25
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <cmndr+0x4>
     8fc:	00 00       	nop
     8fe:	1c 98       	cbi	0x03, 4	; 3
     900:	1e 9a       	sbi	0x03, 6	; 3
     902:	1f 98       	cbi	0x03, 7	; 3
     904:	8b bb       	out	0x1b, r24	; 27
     906:	81 e3       	ldi	r24, 0x31	; 49
     908:	8a 95       	dec	r24
     90a:	f1 f7       	brne	.-4      	; 0x908 <cmndr+0x14>
     90c:	00 00       	nop
     90e:	1d 98       	cbi	0x03, 5	; 3
     910:	08 95       	ret

00000912 <cmnda>:
     912:	1d 9a       	sbi	0x03, 5	; 3
     914:	91 e3       	ldi	r25, 0x31	; 49
     916:	9a 95       	dec	r25
     918:	f1 f7       	brne	.-4      	; 0x916 <cmnda+0x4>
     91a:	00 00       	nop
     91c:	1c 98       	cbi	0x03, 4	; 3
     91e:	1e 9a       	sbi	0x03, 6	; 3
     920:	1f 9a       	sbi	0x03, 7	; 3
     922:	8b bb       	out	0x1b, r24	; 27
     924:	81 e3       	ldi	r24, 0x31	; 49
     926:	8a 95       	dec	r24
     928:	f1 f7       	brne	.-4      	; 0x926 <cmnda+0x14>
     92a:	00 00       	nop
     92c:	1d 98       	cbi	0x03, 5	; 3
     92e:	08 95       	ret

00000930 <datal>:
     930:	1d 9a       	sbi	0x03, 5	; 3
     932:	91 e3       	ldi	r25, 0x31	; 49
     934:	9a 95       	dec	r25
     936:	f1 f7       	brne	.-4      	; 0x934 <datal+0x4>
     938:	00 00       	nop
     93a:	1c 9a       	sbi	0x03, 4	; 3
     93c:	1e 98       	cbi	0x03, 6	; 3
     93e:	1f 9a       	sbi	0x03, 7	; 3
     940:	8b bb       	out	0x1b, r24	; 27
     942:	81 e3       	ldi	r24, 0x31	; 49
     944:	8a 95       	dec	r24
     946:	f1 f7       	brne	.-4      	; 0x944 <datal+0x14>
     948:	00 00       	nop
     94a:	1d 98       	cbi	0x03, 5	; 3
     94c:	08 95       	ret

0000094e <datar>:
     94e:	1d 9a       	sbi	0x03, 5	; 3
     950:	91 e3       	ldi	r25, 0x31	; 49
     952:	9a 95       	dec	r25
     954:	f1 f7       	brne	.-4      	; 0x952 <datar+0x4>
     956:	00 00       	nop
     958:	1c 9a       	sbi	0x03, 4	; 3
     95a:	1e 9a       	sbi	0x03, 6	; 3
     95c:	1f 98       	cbi	0x03, 7	; 3
     95e:	8b bb       	out	0x1b, r24	; 27
     960:	81 e3       	ldi	r24, 0x31	; 49
     962:	8a 95       	dec	r24
     964:	f1 f7       	brne	.-4      	; 0x962 <datar+0x14>
     966:	00 00       	nop
     968:	1d 98       	cbi	0x03, 5	; 3
     96a:	08 95       	ret

0000096c <dataa>:
     96c:	1d 9a       	sbi	0x03, 5	; 3
     96e:	91 e3       	ldi	r25, 0x31	; 49
     970:	9a 95       	dec	r25
     972:	f1 f7       	brne	.-4      	; 0x970 <dataa+0x4>
     974:	00 00       	nop
     976:	1c 9a       	sbi	0x03, 4	; 3
     978:	1e 9a       	sbi	0x03, 6	; 3
     97a:	1f 9a       	sbi	0x03, 7	; 3
     97c:	8b bb       	out	0x1b, r24	; 27
     97e:	81 e3       	ldi	r24, 0x31	; 49
     980:	8a 95       	dec	r24
     982:	f1 f7       	brne	.-4      	; 0x980 <dataa+0x14>
     984:	00 00       	nop
     986:	1d 98       	cbi	0x03, 5	; 3
     988:	08 95       	ret

0000098a <lcd_clear>:
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	d8 eb       	ldi	r29, 0xB8	; 184
     990:	8d 2f       	mov	r24, r29
     992:	bf df       	rcall	.-130    	; 0x912 <cmnda>
     994:	80 e4       	ldi	r24, 0x40	; 64
     996:	bd df       	rcall	.-134    	; 0x912 <cmnda>
     998:	c0 e4       	ldi	r28, 0x40	; 64
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	e7 df       	rcall	.-50     	; 0x96c <dataa>
     99e:	c1 50       	subi	r28, 0x01	; 1
     9a0:	e1 f7       	brne	.-8      	; 0x99a <lcd_clear+0x10>
     9a2:	df 5f       	subi	r29, 0xFF	; 255
     9a4:	d0 3c       	cpi	r29, 0xC0	; 192
     9a6:	a1 f7       	brne	.-24     	; 0x990 <lcd_clear+0x6>
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	08 95       	ret

000009ae <lcd_init>:
     9ae:	8f e3       	ldi	r24, 0x3F	; 63
     9b0:	b0 df       	rcall	.-160    	; 0x912 <cmnda>
     9b2:	80 ec       	ldi	r24, 0xC0	; 192
     9b4:	ae df       	rcall	.-164    	; 0x912 <cmnda>
     9b6:	88 eb       	ldi	r24, 0xB8	; 184
     9b8:	ac df       	rcall	.-168    	; 0x912 <cmnda>
     9ba:	80 e4       	ldi	r24, 0x40	; 64
     9bc:	aa cf       	rjmp	.-172    	; 0x912 <cmnda>
     9be:	08 95       	ret

000009c0 <lcd_xy>:
     9c0:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <xchar>
     9c4:	60 93 fa 07 	sts	0x07FA, r22	; 0x8007fa <ychar>
     9c8:	88 54       	subi	r24, 0x48	; 72
     9ca:	a3 df       	rcall	.-186    	; 0x912 <cmnda>
     9cc:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <ychar>
     9d0:	8a 30       	cpi	r24, 0x0A	; 10
     9d2:	38 f4       	brcc	.+14     	; 0x9e2 <lcd_xy+0x22>
     9d4:	98 2f       	mov	r25, r24
     9d6:	99 0f       	add	r25, r25
     9d8:	89 0f       	add	r24, r25
     9da:	88 0f       	add	r24, r24
     9dc:	8c 5b       	subi	r24, 0xBC	; 188
     9de:	7b cf       	rjmp	.-266    	; 0x8d6 <cmndl>
     9e0:	08 95       	ret
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	0a 97       	sbiw	r24, 0x0a	; 10
     9e6:	98 2f       	mov	r25, r24
     9e8:	99 0f       	add	r25, r25
     9ea:	89 0f       	add	r24, r25
     9ec:	88 0f       	add	r24, r24
     9ee:	80 5c       	subi	r24, 0xC0	; 192
     9f0:	81 cf       	rjmp	.-254    	; 0x8f4 <cmndr>
     9f2:	08 95       	ret

000009f4 <lcd_char>:
     9f4:	1f 93       	push	r17
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	ec 01       	movw	r28, r24
     9fe:	cc 0f       	add	r28, r28
     a00:	dd 1f       	adc	r29, r29
     a02:	cc 0f       	add	r28, r28
     a04:	dd 1f       	adc	r29, r29
     a06:	8c 0f       	add	r24, r28
     a08:	9d 1f       	adc	r25, r29
     a0a:	ec 01       	movw	r28, r24
     a0c:	ca 59       	subi	r28, 0x9A	; 154
     a0e:	df 4f       	sbci	r29, 0xFF	; 255
     a10:	15 e0       	ldi	r17, 0x05	; 5
     a12:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <ychar>
     a16:	8a 30       	cpi	r24, 0x0A	; 10
     a18:	18 f4       	brcc	.+6      	; 0xa20 <lcd_char+0x2c>
     a1a:	88 81       	ld	r24, Y
     a1c:	89 df       	rcall	.-238    	; 0x930 <datal>
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <lcd_char+0x30>
     a20:	88 81       	ld	r24, Y
     a22:	95 df       	rcall	.-214    	; 0x94e <datar>
     a24:	11 50       	subi	r17, 0x01	; 1
     a26:	21 96       	adiw	r28, 0x01	; 1
     a28:	11 11       	cpse	r17, r1
     a2a:	f3 cf       	rjmp	.-26     	; 0xa12 <lcd_char+0x1e>
     a2c:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <ychar>
     a30:	8a 30       	cpi	r24, 0x0A	; 10
     a32:	18 f4       	brcc	.+6      	; 0xa3a <lcd_char+0x46>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	7c df       	rcall	.-264    	; 0x930 <datal>
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <lcd_char+0x4a>
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	88 df       	rcall	.-240    	; 0x94e <datar>
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	08 95       	ret

00000a46 <lcd_string>:
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	ea 01       	movw	r28, r20
     a4c:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <xchar>
     a50:	60 93 fa 07 	sts	0x07FA, r22	; 0x8007fa <ychar>
     a54:	b5 df       	rcall	.-150    	; 0x9c0 <lcd_xy>
     a56:	88 81       	ld	r24, Y
     a58:	88 23       	and	r24, r24
     a5a:	81 f0       	breq	.+32     	; 0xa7c <lcd_string+0x36>
     a5c:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <ychar>
     a60:	8a 30       	cpi	r24, 0x0A	; 10
     a62:	11 f4       	brne	.+4      	; 0xa68 <lcd_string+0x22>
     a64:	80 e4       	ldi	r24, 0x40	; 64
     a66:	46 df       	rcall	.-372    	; 0x8f4 <cmndr>
     a68:	89 91       	ld	r24, Y+
     a6a:	c4 df       	rcall	.-120    	; 0x9f4 <lcd_char>
     a6c:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <ychar>
     a70:	8f 5f       	subi	r24, 0xFF	; 255
     a72:	80 93 fa 07 	sts	0x07FA, r24	; 0x8007fa <ychar>
     a76:	88 81       	ld	r24, Y
     a78:	81 11       	cpse	r24, r1
     a7a:	f0 cf       	rjmp	.-32     	; 0xa5c <lcd_string+0x16>
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <GLCD_Axis_xy>:
     a82:	cf 93       	push	r28
     a84:	c6 2f       	mov	r28, r22
     a86:	88 54       	subi	r24, 0x48	; 72
     a88:	44 df       	rcall	.-376    	; 0x912 <cmnda>
     a8a:	c0 34       	cpi	r28, 0x40	; 64
     a8c:	20 f4       	brcc	.+8      	; 0xa96 <GLCD_Axis_xy+0x14>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	8c 0f       	add	r24, r28
     a92:	21 df       	rcall	.-446    	; 0x8d6 <cmndl>
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <GLCD_Axis_xy+0x18>
     a96:	8c 2f       	mov	r24, r28
     a98:	2d df       	rcall	.-422    	; 0x8f4 <cmndr>
     a9a:	cf 91       	pop	r28
     a9c:	08 95       	ret

00000a9e <GLCD_Dot>:
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	80 34       	cpi	r24, 0x40	; 64
     aaa:	08 f0       	brcs	.+2      	; 0xaae <GLCD_Dot+0x10>
     aac:	52 c0       	rjmp	.+164    	; 0xb52 <GLCD_Dot+0xb4>
     aae:	66 23       	and	r22, r22
     ab0:	0c f4       	brge	.+2      	; 0xab4 <GLCD_Dot+0x16>
     ab2:	4f c0       	rjmp	.+158    	; 0xb52 <GLCD_Dot+0xb4>
     ab4:	28 2f       	mov	r18, r24
     ab6:	26 95       	lsr	r18
     ab8:	26 95       	lsr	r18
     aba:	26 95       	lsr	r18
     abc:	98 2f       	mov	r25, r24
     abe:	97 70       	andi	r25, 0x07	; 7
     ac0:	71 f0       	breq	.+28     	; 0xade <GLCD_Dot+0x40>
     ac2:	91 30       	cpi	r25, 0x01	; 1
     ac4:	71 f0       	breq	.+28     	; 0xae2 <GLCD_Dot+0x44>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	71 f0       	breq	.+28     	; 0xae6 <GLCD_Dot+0x48>
     aca:	93 30       	cpi	r25, 0x03	; 3
     acc:	71 f0       	breq	.+28     	; 0xaea <GLCD_Dot+0x4c>
     ace:	94 30       	cpi	r25, 0x04	; 4
     ad0:	71 f0       	breq	.+28     	; 0xaee <GLCD_Dot+0x50>
     ad2:	95 30       	cpi	r25, 0x05	; 5
     ad4:	71 f0       	breq	.+28     	; 0xaf2 <GLCD_Dot+0x54>
     ad6:	96 30       	cpi	r25, 0x06	; 6
     ad8:	71 f0       	breq	.+28     	; 0xaf6 <GLCD_Dot+0x58>
     ada:	90 e8       	ldi	r25, 0x80	; 128
     adc:	0d c0       	rjmp	.+26     	; 0xaf8 <GLCD_Dot+0x5a>
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	0b c0       	rjmp	.+22     	; 0xaf8 <GLCD_Dot+0x5a>
     ae2:	92 e0       	ldi	r25, 0x02	; 2
     ae4:	09 c0       	rjmp	.+18     	; 0xaf8 <GLCD_Dot+0x5a>
     ae6:	94 e0       	ldi	r25, 0x04	; 4
     ae8:	07 c0       	rjmp	.+14     	; 0xaf8 <GLCD_Dot+0x5a>
     aea:	98 e0       	ldi	r25, 0x08	; 8
     aec:	05 c0       	rjmp	.+10     	; 0xaf8 <GLCD_Dot+0x5a>
     aee:	90 e1       	ldi	r25, 0x10	; 16
     af0:	03 c0       	rjmp	.+6      	; 0xaf8 <GLCD_Dot+0x5a>
     af2:	90 e2       	ldi	r25, 0x20	; 32
     af4:	01 c0       	rjmp	.+2      	; 0xaf8 <GLCD_Dot+0x5a>
     af6:	90 e4       	ldi	r25, 0x40	; 64
     af8:	c6 2f       	mov	r28, r22
     afa:	e6 2e       	mov	r14, r22
     afc:	f1 2c       	mov	r15, r1
     afe:	02 2f       	mov	r16, r18
     b00:	10 e0       	ldi	r17, 0x00	; 0
     b02:	f7 01       	movw	r30, r14
     b04:	80 e8       	ldi	r24, 0x80	; 128
     b06:	28 9f       	mul	r18, r24
     b08:	e0 0d       	add	r30, r0
     b0a:	f1 1d       	adc	r31, r1
     b0c:	11 24       	eor	r1, r1
     b0e:	e6 50       	subi	r30, 0x06	; 6
     b10:	fc 4f       	sbci	r31, 0xFC	; 252
     b12:	80 81       	ld	r24, Z
     b14:	89 2b       	or	r24, r25
     b16:	80 83       	st	Z, r24
     b18:	82 2f       	mov	r24, r18
     b1a:	b3 df       	rcall	.-154    	; 0xa82 <GLCD_Axis_xy>
     b1c:	c0 34       	cpi	r28, 0x40	; 64
     b1e:	68 f4       	brcc	.+26     	; 0xb3a <GLCD_Dot+0x9c>
     b20:	f8 01       	movw	r30, r16
     b22:	f6 95       	lsr	r31
     b24:	fe 2f       	mov	r31, r30
     b26:	ee 27       	eor	r30, r30
     b28:	f7 95       	ror	r31
     b2a:	e7 95       	ror	r30
     b2c:	ee 0d       	add	r30, r14
     b2e:	ff 1d       	adc	r31, r15
     b30:	e6 50       	subi	r30, 0x06	; 6
     b32:	fc 4f       	sbci	r31, 0xFC	; 252
     b34:	80 81       	ld	r24, Z
     b36:	fc de       	rcall	.-520    	; 0x930 <datal>
     b38:	0c c0       	rjmp	.+24     	; 0xb52 <GLCD_Dot+0xb4>
     b3a:	f8 01       	movw	r30, r16
     b3c:	f6 95       	lsr	r31
     b3e:	fe 2f       	mov	r31, r30
     b40:	ee 27       	eor	r30, r30
     b42:	f7 95       	ror	r31
     b44:	e7 95       	ror	r30
     b46:	ee 0d       	add	r30, r14
     b48:	ff 1d       	adc	r31, r15
     b4a:	e6 50       	subi	r30, 0x06	; 6
     b4c:	fc 4f       	sbci	r31, 0xFC	; 252
     b4e:	80 81       	ld	r24, Z
     b50:	fe de       	rcall	.-516    	; 0x94e <datar>
     b52:	cf 91       	pop	r28
     b54:	1f 91       	pop	r17
     b56:	0f 91       	pop	r16
     b58:	ff 90       	pop	r15
     b5a:	ef 90       	pop	r14
     b5c:	08 95       	ret

00000b5e <ScreenBuffer_clear>:
     b5e:	ea ef       	ldi	r30, 0xFA	; 250
     b60:	f3 e0       	ldi	r31, 0x03	; 3
     b62:	2a ef       	ldi	r18, 0xFA	; 250
     b64:	37 e0       	ldi	r19, 0x07	; 7
     b66:	08 c0       	rjmp	.+16     	; 0xb78 <ScreenBuffer_clear+0x1a>
     b68:	11 92       	st	Z+, r1
     b6a:	e8 17       	cp	r30, r24
     b6c:	f9 07       	cpc	r31, r25
     b6e:	e1 f7       	brne	.-8      	; 0xb68 <ScreenBuffer_clear+0xa>
     b70:	fc 01       	movw	r30, r24
     b72:	82 17       	cp	r24, r18
     b74:	93 07       	cpc	r25, r19
     b76:	21 f0       	breq	.+8      	; 0xb80 <ScreenBuffer_clear+0x22>
     b78:	cf 01       	movw	r24, r30
     b7a:	80 58       	subi	r24, 0x80	; 128
     b7c:	9f 4f       	sbci	r25, 0xFF	; 255
     b7e:	f4 cf       	rjmp	.-24     	; 0xb68 <ScreenBuffer_clear+0xa>
     b80:	08 95       	ret

00000b82 <GLCD_Line>:
     b82:	8f 92       	push	r8
     b84:	9f 92       	push	r9
     b86:	af 92       	push	r10
     b88:	bf 92       	push	r11
     b8a:	cf 92       	push	r12
     b8c:	df 92       	push	r13
     b8e:	ef 92       	push	r14
     b90:	ff 92       	push	r15
     b92:	0f 93       	push	r16
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	62 17       	cp	r22, r18
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GLCD_Line+0x1e>
     b9e:	47 c0       	rjmp	.+142    	; 0xc2e <GLCD_Line+0xac>
     ba0:	62 17       	cp	r22, r18
     ba2:	18 f5       	brcc	.+70     	; 0xbea <GLCD_Line+0x68>
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	02 2f       	mov	r16, r18
     ba8:	10 e0       	ldi	r17, 0x00	; 0
     baa:	06 17       	cp	r16, r22
     bac:	17 07       	cpc	r17, r23
     bae:	0c f4       	brge	.+2      	; 0xbb2 <GLCD_Line+0x30>
     bb0:	63 c0       	rjmp	.+198    	; 0xc78 <GLCD_Line+0xf6>
     bb2:	c8 2f       	mov	r28, r24
     bb4:	d0 e0       	ldi	r29, 0x00	; 0
     bb6:	c4 2e       	mov	r12, r20
     bb8:	d1 2c       	mov	r13, r1
     bba:	cc 1a       	sub	r12, r28
     bbc:	dd 0a       	sbc	r13, r29
     bbe:	4b 01       	movw	r8, r22
     bc0:	e1 2c       	mov	r14, r1
     bc2:	f1 2c       	mov	r15, r1
     bc4:	58 01       	movw	r10, r16
     bc6:	a6 1a       	sub	r10, r22
     bc8:	b7 0a       	sbc	r11, r23
     bca:	c7 01       	movw	r24, r14
     bcc:	b5 01       	movw	r22, r10
     bce:	51 d3       	rcall	.+1698   	; 0x1272 <__divmodhi4>
     bd0:	86 2f       	mov	r24, r22
     bd2:	68 2d       	mov	r22, r8
     bd4:	8c 0f       	add	r24, r28
     bd6:	63 df       	rcall	.-314    	; 0xa9e <GLCD_Dot>
     bd8:	8f ef       	ldi	r24, 0xFF	; 255
     bda:	88 1a       	sub	r8, r24
     bdc:	98 0a       	sbc	r9, r24
     bde:	ec 0c       	add	r14, r12
     be0:	fd 1c       	adc	r15, r13
     be2:	08 15       	cp	r16, r8
     be4:	19 05       	cpc	r17, r9
     be6:	8c f7       	brge	.-30     	; 0xbca <GLCD_Line+0x48>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <GLCD_Line+0xf6>
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	02 2f       	mov	r16, r18
     bee:	10 e0       	ldi	r17, 0x00	; 0
     bf0:	60 17       	cp	r22, r16
     bf2:	71 07       	cpc	r23, r17
     bf4:	0c f4       	brge	.+2      	; 0xbf8 <GLCD_Line+0x76>
     bf6:	40 c0       	rjmp	.+128    	; 0xc78 <GLCD_Line+0xf6>
     bf8:	c8 2f       	mov	r28, r24
     bfa:	d0 e0       	ldi	r29, 0x00	; 0
     bfc:	5e 01       	movw	r10, r28
     bfe:	a4 1a       	sub	r10, r20
     c00:	b1 08       	sbc	r11, r1
     c02:	4b 01       	movw	r8, r22
     c04:	e1 2c       	mov	r14, r1
     c06:	f1 2c       	mov	r15, r1
     c08:	68 01       	movw	r12, r16
     c0a:	c6 1a       	sub	r12, r22
     c0c:	d7 0a       	sbc	r13, r23
     c0e:	c7 01       	movw	r24, r14
     c10:	b6 01       	movw	r22, r12
     c12:	2f d3       	rcall	.+1630   	; 0x1272 <__divmodhi4>
     c14:	86 2f       	mov	r24, r22
     c16:	68 2d       	mov	r22, r8
     c18:	8c 0f       	add	r24, r28
     c1a:	41 df       	rcall	.-382    	; 0xa9e <GLCD_Dot>
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	88 1a       	sub	r8, r24
     c20:	91 08       	sbc	r9, r1
     c22:	ea 0c       	add	r14, r10
     c24:	fb 1c       	adc	r15, r11
     c26:	80 16       	cp	r8, r16
     c28:	91 06       	cpc	r9, r17
     c2a:	8c f7       	brge	.-30     	; 0xc0e <GLCD_Line+0x8c>
     c2c:	25 c0       	rjmp	.+74     	; 0xc78 <GLCD_Line+0xf6>
     c2e:	84 17       	cp	r24, r20
     c30:	11 f1       	breq	.+68     	; 0xc76 <GLCD_Line+0xf4>
     c32:	84 17       	cp	r24, r20
     c34:	80 f4       	brcc	.+32     	; 0xc56 <GLCD_Line+0xd4>
     c36:	c8 2f       	mov	r28, r24
     c38:	d0 e0       	ldi	r29, 0x00	; 0
     c3a:	e4 2e       	mov	r14, r20
     c3c:	f1 2c       	mov	r15, r1
     c3e:	ec 16       	cp	r14, r28
     c40:	fd 06       	cpc	r15, r29
     c42:	d4 f0       	brlt	.+52     	; 0xc78 <GLCD_Line+0xf6>
     c44:	16 2f       	mov	r17, r22
     c46:	61 2f       	mov	r22, r17
     c48:	8c 2f       	mov	r24, r28
     c4a:	29 df       	rcall	.-430    	; 0xa9e <GLCD_Dot>
     c4c:	21 96       	adiw	r28, 0x01	; 1
     c4e:	ec 16       	cp	r14, r28
     c50:	fd 06       	cpc	r15, r29
     c52:	cc f7       	brge	.-14     	; 0xc46 <GLCD_Line+0xc4>
     c54:	11 c0       	rjmp	.+34     	; 0xc78 <GLCD_Line+0xf6>
     c56:	c8 2f       	mov	r28, r24
     c58:	d0 e0       	ldi	r29, 0x00	; 0
     c5a:	e4 2e       	mov	r14, r20
     c5c:	f1 2c       	mov	r15, r1
     c5e:	ce 15       	cp	r28, r14
     c60:	df 05       	cpc	r29, r15
     c62:	54 f0       	brlt	.+20     	; 0xc78 <GLCD_Line+0xf6>
     c64:	16 2f       	mov	r17, r22
     c66:	61 2f       	mov	r22, r17
     c68:	8c 2f       	mov	r24, r28
     c6a:	19 df       	rcall	.-462    	; 0xa9e <GLCD_Dot>
     c6c:	21 97       	sbiw	r28, 0x01	; 1
     c6e:	ce 15       	cp	r28, r14
     c70:	df 05       	cpc	r29, r15
     c72:	cc f7       	brge	.-14     	; 0xc66 <GLCD_Line+0xe4>
     c74:	01 c0       	rjmp	.+2      	; 0xc78 <GLCD_Line+0xf6>
     c76:	13 df       	rcall	.-474    	; 0xa9e <GLCD_Dot>
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	ef 90       	pop	r14
     c84:	df 90       	pop	r13
     c86:	cf 90       	pop	r12
     c88:	bf 90       	pop	r11
     c8a:	af 90       	pop	r10
     c8c:	9f 90       	pop	r9
     c8e:	8f 90       	pop	r8
     c90:	08 95       	ret

00000c92 <GLCD_Rectangle>:
     c92:	0f 93       	push	r16
     c94:	1f 93       	push	r17
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	c8 2f       	mov	r28, r24
     c9c:	06 2f       	mov	r16, r22
     c9e:	14 2f       	mov	r17, r20
     ca0:	d2 2f       	mov	r29, r18
     ca2:	48 2f       	mov	r20, r24
     ca4:	6e df       	rcall	.-292    	; 0xb82 <GLCD_Line>
     ca6:	2d 2f       	mov	r18, r29
     ca8:	41 2f       	mov	r20, r17
     caa:	60 2f       	mov	r22, r16
     cac:	81 2f       	mov	r24, r17
     cae:	69 df       	rcall	.-302    	; 0xb82 <GLCD_Line>
     cb0:	20 2f       	mov	r18, r16
     cb2:	41 2f       	mov	r20, r17
     cb4:	60 2f       	mov	r22, r16
     cb6:	8c 2f       	mov	r24, r28
     cb8:	64 df       	rcall	.-312    	; 0xb82 <GLCD_Line>
     cba:	2d 2f       	mov	r18, r29
     cbc:	41 2f       	mov	r20, r17
     cbe:	6d 2f       	mov	r22, r29
     cc0:	8c 2f       	mov	r24, r28
     cc2:	5f df       	rcall	.-322    	; 0xb82 <GLCD_Line>
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
     ccc:	08 95       	ret

00000cce <GLCD_Circle>:
     cce:	2f 92       	push	r2
     cd0:	3f 92       	push	r3
     cd2:	4f 92       	push	r4
     cd4:	5f 92       	push	r5
     cd6:	6f 92       	push	r6
     cd8:	7f 92       	push	r7
     cda:	8f 92       	push	r8
     cdc:	9f 92       	push	r9
     cde:	af 92       	push	r10
     ce0:	bf 92       	push	r11
     ce2:	cf 92       	push	r12
     ce4:	df 92       	push	r13
     ce6:	ef 92       	push	r14
     ce8:	ff 92       	push	r15
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	27 97       	sbiw	r28, 0x07	; 7
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	8d 83       	std	Y+5, r24	; 0x05
     d04:	e6 2e       	mov	r14, r22
     d06:	f1 2c       	mov	r15, r1
     d08:	24 2f       	mov	r18, r20
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	3c 83       	std	Y+4, r19	; 0x04
     d0e:	2b 83       	std	Y+3, r18	; 0x03
     d10:	89 01       	movw	r16, r18
     d12:	00 0f       	add	r16, r16
     d14:	11 1f       	adc	r17, r17
     d16:	02 0f       	add	r16, r18
     d18:	13 1f       	adc	r17, r19
     d1a:	c8 01       	movw	r24, r16
     d1c:	95 95       	asr	r25
     d1e:	87 95       	ror	r24
     d20:	95 95       	asr	r25
     d22:	87 95       	ror	r24
     d24:	9a 83       	std	Y+2, r25	; 0x02
     d26:	89 83       	std	Y+1, r24	; 0x01
     d28:	f7 01       	movw	r30, r14
     d2a:	e8 1b       	sub	r30, r24
     d2c:	f9 0b       	sbc	r31, r25
     d2e:	ff 83       	std	Y+7, r31	; 0x07
     d30:	ee 83       	std	Y+6, r30	; 0x06
     d32:	6c 01       	movw	r12, r24
     d34:	ce 0c       	add	r12, r14
     d36:	df 1c       	adc	r13, r15
     d38:	ce 16       	cp	r12, r30
     d3a:	df 06       	cpc	r13, r31
     d3c:	0c f4       	brge	.+2      	; 0xd40 <GLCD_Circle+0x72>
     d3e:	39 c0       	rjmp	.+114    	; 0xdb2 <GLCD_Circle+0xe4>
     d40:	22 9f       	mul	r18, r18
     d42:	30 01       	movw	r6, r0
     d44:	23 9f       	mul	r18, r19
     d46:	70 0c       	add	r7, r0
     d48:	70 0c       	add	r7, r0
     d4a:	11 24       	eor	r1, r1
     d4c:	8c 01       	movw	r16, r24
     d4e:	27 01       	movw	r4, r14
     d50:	fd 81       	ldd	r31, Y+5	; 0x05
     d52:	2f 2e       	mov	r2, r31
     d54:	8e 81       	ldd	r24, Y+6	; 0x06
     d56:	9f 81       	ldd	r25, Y+7	; 0x07
     d58:	84 19       	sub	r24, r4
     d5a:	95 09       	sbc	r25, r5
     d5c:	08 9f       	mul	r16, r24
     d5e:	40 01       	movw	r8, r0
     d60:	09 9f       	mul	r16, r25
     d62:	90 0c       	add	r9, r0
     d64:	18 9f       	mul	r17, r24
     d66:	90 0c       	add	r9, r0
     d68:	11 24       	eor	r1, r1
     d6a:	86 0c       	add	r8, r6
     d6c:	97 1c       	adc	r9, r7
     d6e:	09 2c       	mov	r0, r9
     d70:	00 0c       	add	r0, r0
     d72:	aa 08       	sbc	r10, r10
     d74:	bb 08       	sbc	r11, r11
     d76:	c5 01       	movw	r24, r10
     d78:	b4 01       	movw	r22, r8
     d7a:	84 d1       	rcall	.+776    	; 0x1084 <__floatsisf>
     d7c:	13 d2       	rcall	.+1062   	; 0x11a4 <sqrt>
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e0       	ldi	r20, 0x00	; 0
     d84:	5f e3       	ldi	r21, 0x3F	; 63
     d86:	ec d0       	rcall	.+472    	; 0xf60 <__addsf3>
     d88:	4f d1       	rcall	.+670    	; 0x1028 <__fixunssfsi>
     d8a:	a6 2e       	mov	r10, r22
     d8c:	6e 81       	ldd	r22, Y+6	; 0x06
     d8e:	82 2d       	mov	r24, r2
     d90:	8a 0d       	add	r24, r10
     d92:	85 de       	rcall	.-758    	; 0xa9e <GLCD_Dot>
     d94:	6e 81       	ldd	r22, Y+6	; 0x06
     d96:	82 2d       	mov	r24, r2
     d98:	8a 19       	sub	r24, r10
     d9a:	81 de       	rcall	.-766    	; 0xa9e <GLCD_Dot>
     d9c:	2e 81       	ldd	r18, Y+6	; 0x06
     d9e:	3f 81       	ldd	r19, Y+7	; 0x07
     da0:	2f 5f       	subi	r18, 0xFF	; 255
     da2:	3f 4f       	sbci	r19, 0xFF	; 255
     da4:	3f 83       	std	Y+7, r19	; 0x07
     da6:	2e 83       	std	Y+6, r18	; 0x06
     da8:	01 50       	subi	r16, 0x01	; 1
     daa:	11 09       	sbc	r17, r1
     dac:	c2 16       	cp	r12, r18
     dae:	d3 06       	cpc	r13, r19
     db0:	8c f6       	brge	.-94     	; 0xd54 <GLCD_Circle+0x86>
     db2:	3d 81       	ldd	r19, Y+5	; 0x05
     db4:	c3 2e       	mov	r12, r19
     db6:	d1 2c       	mov	r13, r1
     db8:	16 01       	movw	r2, r12
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	9a 81       	ldd	r25, Y+2	; 0x02
     dbe:	28 1a       	sub	r2, r24
     dc0:	39 0a       	sbc	r3, r25
     dc2:	c8 0e       	add	r12, r24
     dc4:	d9 1e       	adc	r13, r25
     dc6:	c2 14       	cp	r12, r2
     dc8:	d3 04       	cpc	r13, r3
     dca:	0c f4       	brge	.+2      	; 0xdce <GLCD_Circle+0x100>
     dcc:	39 c0       	rjmp	.+114    	; 0xe40 <GLCD_Circle+0x172>
     dce:	eb 81       	ldd	r30, Y+3	; 0x03
     dd0:	fc 81       	ldd	r31, Y+4	; 0x04
     dd2:	ee 9f       	mul	r30, r30
     dd4:	30 01       	movw	r6, r0
     dd6:	ef 9f       	mul	r30, r31
     dd8:	70 0c       	add	r7, r0
     dda:	70 0c       	add	r7, r0
     ddc:	11 24       	eor	r1, r1
     dde:	8c 01       	movw	r16, r24
     de0:	43 2e       	mov	r4, r19
     de2:	51 2c       	mov	r5, r1
     de4:	c1 01       	movw	r24, r2
     de6:	84 19       	sub	r24, r4
     de8:	95 09       	sbc	r25, r5
     dea:	08 9f       	mul	r16, r24
     dec:	40 01       	movw	r8, r0
     dee:	09 9f       	mul	r16, r25
     df0:	90 0c       	add	r9, r0
     df2:	18 9f       	mul	r17, r24
     df4:	90 0c       	add	r9, r0
     df6:	11 24       	eor	r1, r1
     df8:	86 0c       	add	r8, r6
     dfa:	97 1c       	adc	r9, r7
     dfc:	09 2c       	mov	r0, r9
     dfe:	00 0c       	add	r0, r0
     e00:	aa 08       	sbc	r10, r10
     e02:	bb 08       	sbc	r11, r11
     e04:	c5 01       	movw	r24, r10
     e06:	b4 01       	movw	r22, r8
     e08:	3d d1       	rcall	.+634    	; 0x1084 <__floatsisf>
     e0a:	cc d1       	rcall	.+920    	; 0x11a4 <sqrt>
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	40 e0       	ldi	r20, 0x00	; 0
     e12:	5f e3       	ldi	r21, 0x3F	; 63
     e14:	a5 d0       	rcall	.+330    	; 0xf60 <__addsf3>
     e16:	08 d1       	rcall	.+528    	; 0x1028 <__fixunssfsi>
     e18:	a6 2e       	mov	r10, r22
     e1a:	b1 2c       	mov	r11, r1
     e1c:	b7 01       	movw	r22, r14
     e1e:	6a 0d       	add	r22, r10
     e20:	7b 1d       	adc	r23, r11
     e22:	82 2d       	mov	r24, r2
     e24:	3c de       	rcall	.-904    	; 0xa9e <GLCD_Dot>
     e26:	b7 01       	movw	r22, r14
     e28:	6a 19       	sub	r22, r10
     e2a:	7b 09       	sbc	r23, r11
     e2c:	82 2d       	mov	r24, r2
     e2e:	37 de       	rcall	.-914    	; 0xa9e <GLCD_Dot>
     e30:	ff ef       	ldi	r31, 0xFF	; 255
     e32:	2f 1a       	sub	r2, r31
     e34:	3f 0a       	sbc	r3, r31
     e36:	01 50       	subi	r16, 0x01	; 1
     e38:	11 09       	sbc	r17, r1
     e3a:	c2 14       	cp	r12, r2
     e3c:	d3 04       	cpc	r13, r3
     e3e:	94 f6       	brge	.-92     	; 0xde4 <GLCD_Circle+0x116>
     e40:	27 96       	adiw	r28, 0x07	; 7
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	ff 90       	pop	r15
     e56:	ef 90       	pop	r14
     e58:	df 90       	pop	r13
     e5a:	cf 90       	pop	r12
     e5c:	bf 90       	pop	r11
     e5e:	af 90       	pop	r10
     e60:	9f 90       	pop	r9
     e62:	8f 90       	pop	r8
     e64:	7f 90       	pop	r7
     e66:	6f 90       	pop	r6
     e68:	5f 90       	pop	r5
     e6a:	4f 90       	pop	r4
     e6c:	3f 90       	pop	r3
     e6e:	2f 90       	pop	r2
     e70:	08 95       	ret

00000e72 <GLCD_1DigitDecimal>:
     e72:	9d ec       	ldi	r25, 0xCD	; 205
     e74:	89 9f       	mul	r24, r25
     e76:	91 2d       	mov	r25, r1
     e78:	11 24       	eor	r1, r1
     e7a:	96 95       	lsr	r25
     e7c:	96 95       	lsr	r25
     e7e:	96 95       	lsr	r25
     e80:	99 0f       	add	r25, r25
     e82:	29 2f       	mov	r18, r25
     e84:	22 0f       	add	r18, r18
     e86:	22 0f       	add	r18, r18
     e88:	92 0f       	add	r25, r18
     e8a:	89 1b       	sub	r24, r25
     e8c:	98 2f       	mov	r25, r24
     e8e:	31 f4       	brne	.+12     	; 0xe9c <GLCD_1DigitDecimal+0x2a>
     e90:	61 11       	cpse	r22, r1
     e92:	04 c0       	rjmp	.+8      	; 0xe9c <GLCD_1DigitDecimal+0x2a>
     e94:	80 e2       	ldi	r24, 0x20	; 32
     e96:	ae dd       	rcall	.-1188   	; 0x9f4 <lcd_char>
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	08 95       	ret
     e9c:	80 e3       	ldi	r24, 0x30	; 48
     e9e:	89 0f       	add	r24, r25
     ea0:	a9 dd       	rcall	.-1198   	; 0x9f4 <lcd_char>
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	08 95       	ret

00000ea6 <GLCD_3DigitDecimal>:

	// display 3-digit decimal number
	// 3자리의 10진수 값을 표시합니다.
	void GLCD_3DigitDecimal(unsigned int number)
	{
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	ac 01       	movw	r20, r24
		unsigned int i;
		unsigned char flag;
		flag = 0;
		number = number % 1000;
     eb0:	9c 01       	movw	r18, r24
     eb2:	36 95       	lsr	r19
     eb4:	27 95       	ror	r18
     eb6:	36 95       	lsr	r19
     eb8:	27 95       	ror	r18
     eba:	36 95       	lsr	r19
     ebc:	27 95       	ror	r18
     ebe:	a5 ec       	ldi	r26, 0xC5	; 197
     ec0:	b0 e2       	ldi	r27, 0x20	; 32
     ec2:	ea d1       	rcall	.+980    	; 0x1298 <__umulhisi3>
     ec4:	ec 01       	movw	r28, r24
     ec6:	d2 95       	swap	r29
     ec8:	c2 95       	swap	r28
     eca:	cf 70       	andi	r28, 0x0F	; 15
     ecc:	cd 27       	eor	r28, r29
     ece:	df 70       	andi	r29, 0x0F	; 15
     ed0:	cd 27       	eor	r28, r29
     ed2:	28 ee       	ldi	r18, 0xE8	; 232
     ed4:	33 e0       	ldi	r19, 0x03	; 3
     ed6:	c2 9f       	mul	r28, r18
     ed8:	c0 01       	movw	r24, r0
     eda:	c3 9f       	mul	r28, r19
     edc:	90 0d       	add	r25, r0
     ede:	d2 9f       	mul	r29, r18
     ee0:	90 0d       	add	r25, r0
     ee2:	11 24       	eor	r1, r1
     ee4:	ea 01       	movw	r28, r20
     ee6:	c8 1b       	sub	r28, r24
     ee8:	d9 0b       	sbc	r29, r25
		i = number/100;
     eea:	9e 01       	movw	r18, r28
     eec:	36 95       	lsr	r19
     eee:	27 95       	ror	r18
     ef0:	36 95       	lsr	r19
     ef2:	27 95       	ror	r18
     ef4:	ab e7       	ldi	r26, 0x7B	; 123
     ef6:	b4 e1       	ldi	r27, 0x14	; 20
     ef8:	cf d1       	rcall	.+926    	; 0x1298 <__umulhisi3>
     efa:	8c 01       	movw	r16, r24
     efc:	16 95       	lsr	r17
     efe:	07 95       	ror	r16
		flag = GLCD_1DigitDecimal(i, flag); // 10^2
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	80 2f       	mov	r24, r16
     f04:	b6 df       	rcall	.-148    	; 0xe72 <GLCD_1DigitDecimal>
     f06:	48 2f       	mov	r20, r24
		number = number % 100;
     f08:	24 e6       	ldi	r18, 0x64	; 100
     f0a:	20 9f       	mul	r18, r16
     f0c:	c0 01       	movw	r24, r0
     f0e:	21 9f       	mul	r18, r17
     f10:	90 0d       	add	r25, r0
     f12:	11 24       	eor	r1, r1
     f14:	c8 1b       	sub	r28, r24
     f16:	d9 0b       	sbc	r29, r25
		i = number/10;
     f18:	9e 01       	movw	r18, r28
     f1a:	ad ec       	ldi	r26, 0xCD	; 205
     f1c:	bc ec       	ldi	r27, 0xCC	; 204
     f1e:	bc d1       	rcall	.+888    	; 0x1298 <__umulhisi3>
     f20:	8c 01       	movw	r16, r24
     f22:	16 95       	lsr	r17
     f24:	07 95       	ror	r16
     f26:	16 95       	lsr	r17
     f28:	07 95       	ror	r16
     f2a:	16 95       	lsr	r17
     f2c:	07 95       	ror	r16
		flag = GLCD_1DigitDecimal(i, flag); // 10^1
     f2e:	64 2f       	mov	r22, r20
     f30:	80 2f       	mov	r24, r16
     f32:	9f df       	rcall	.-194    	; 0xe72 <GLCD_1DigitDecimal>
		i = number % 10;
     f34:	c8 01       	movw	r24, r16
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	00 0f       	add	r16, r16
     f3c:	11 1f       	adc	r17, r17
     f3e:	00 0f       	add	r16, r16
     f40:	11 1f       	adc	r17, r17
     f42:	00 0f       	add	r16, r16
     f44:	11 1f       	adc	r17, r17
     f46:	08 0f       	add	r16, r24
     f48:	19 1f       	adc	r17, r25
     f4a:	ce 01       	movw	r24, r28
     f4c:	80 1b       	sub	r24, r16
     f4e:	91 0b       	sbc	r25, r17
		lcd_char(i + '0');              // 10^0
     f50:	80 5d       	subi	r24, 0xD0	; 208
     f52:	50 dd       	rcall	.-1376   	; 0x9f4 <lcd_char>
	}
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	1f 91       	pop	r17
     f5a:	0f 91       	pop	r16
     f5c:	08 95       	ret

00000f5e <__subsf3>:
     f5e:	50 58       	subi	r21, 0x80	; 128

00000f60 <__addsf3>:
     f60:	bb 27       	eor	r27, r27
     f62:	aa 27       	eor	r26, r26
     f64:	0e d0       	rcall	.+28     	; 0xf82 <__addsf3x>
     f66:	e0 c0       	rjmp	.+448    	; 0x1128 <__fp_round>
     f68:	d1 d0       	rcall	.+418    	; 0x110c <__fp_pscA>
     f6a:	30 f0       	brcs	.+12     	; 0xf78 <__addsf3+0x18>
     f6c:	d6 d0       	rcall	.+428    	; 0x111a <__fp_pscB>
     f6e:	20 f0       	brcs	.+8      	; 0xf78 <__addsf3+0x18>
     f70:	31 f4       	brne	.+12     	; 0xf7e <__addsf3+0x1e>
     f72:	9f 3f       	cpi	r25, 0xFF	; 255
     f74:	11 f4       	brne	.+4      	; 0xf7a <__addsf3+0x1a>
     f76:	1e f4       	brtc	.+6      	; 0xf7e <__addsf3+0x1e>
     f78:	c6 c0       	rjmp	.+396    	; 0x1106 <__fp_nan>
     f7a:	0e f4       	brtc	.+2      	; 0xf7e <__addsf3+0x1e>
     f7c:	e0 95       	com	r30
     f7e:	e7 fb       	bst	r30, 7
     f80:	bc c0       	rjmp	.+376    	; 0x10fa <__fp_inf>

00000f82 <__addsf3x>:
     f82:	e9 2f       	mov	r30, r25
     f84:	e2 d0       	rcall	.+452    	; 0x114a <__fp_split3>
     f86:	80 f3       	brcs	.-32     	; 0xf68 <__addsf3+0x8>
     f88:	ba 17       	cp	r27, r26
     f8a:	62 07       	cpc	r22, r18
     f8c:	73 07       	cpc	r23, r19
     f8e:	84 07       	cpc	r24, r20
     f90:	95 07       	cpc	r25, r21
     f92:	18 f0       	brcs	.+6      	; 0xf9a <__addsf3x+0x18>
     f94:	71 f4       	brne	.+28     	; 0xfb2 <__addsf3x+0x30>
     f96:	9e f5       	brtc	.+102    	; 0xffe <__addsf3x+0x7c>
     f98:	fa c0       	rjmp	.+500    	; 0x118e <__fp_zero>
     f9a:	0e f4       	brtc	.+2      	; 0xf9e <__addsf3x+0x1c>
     f9c:	e0 95       	com	r30
     f9e:	0b 2e       	mov	r0, r27
     fa0:	ba 2f       	mov	r27, r26
     fa2:	a0 2d       	mov	r26, r0
     fa4:	0b 01       	movw	r0, r22
     fa6:	b9 01       	movw	r22, r18
     fa8:	90 01       	movw	r18, r0
     faa:	0c 01       	movw	r0, r24
     fac:	ca 01       	movw	r24, r20
     fae:	a0 01       	movw	r20, r0
     fb0:	11 24       	eor	r1, r1
     fb2:	ff 27       	eor	r31, r31
     fb4:	59 1b       	sub	r21, r25
     fb6:	99 f0       	breq	.+38     	; 0xfde <__addsf3x+0x5c>
     fb8:	59 3f       	cpi	r21, 0xF9	; 249
     fba:	50 f4       	brcc	.+20     	; 0xfd0 <__addsf3x+0x4e>
     fbc:	50 3e       	cpi	r21, 0xE0	; 224
     fbe:	68 f1       	brcs	.+90     	; 0x101a <__addsf3x+0x98>
     fc0:	1a 16       	cp	r1, r26
     fc2:	f0 40       	sbci	r31, 0x00	; 0
     fc4:	a2 2f       	mov	r26, r18
     fc6:	23 2f       	mov	r18, r19
     fc8:	34 2f       	mov	r19, r20
     fca:	44 27       	eor	r20, r20
     fcc:	58 5f       	subi	r21, 0xF8	; 248
     fce:	f3 cf       	rjmp	.-26     	; 0xfb6 <__addsf3x+0x34>
     fd0:	46 95       	lsr	r20
     fd2:	37 95       	ror	r19
     fd4:	27 95       	ror	r18
     fd6:	a7 95       	ror	r26
     fd8:	f0 40       	sbci	r31, 0x00	; 0
     fda:	53 95       	inc	r21
     fdc:	c9 f7       	brne	.-14     	; 0xfd0 <__addsf3x+0x4e>
     fde:	7e f4       	brtc	.+30     	; 0xffe <__addsf3x+0x7c>
     fe0:	1f 16       	cp	r1, r31
     fe2:	ba 0b       	sbc	r27, r26
     fe4:	62 0b       	sbc	r22, r18
     fe6:	73 0b       	sbc	r23, r19
     fe8:	84 0b       	sbc	r24, r20
     fea:	ba f0       	brmi	.+46     	; 0x101a <__addsf3x+0x98>
     fec:	91 50       	subi	r25, 0x01	; 1
     fee:	a1 f0       	breq	.+40     	; 0x1018 <__addsf3x+0x96>
     ff0:	ff 0f       	add	r31, r31
     ff2:	bb 1f       	adc	r27, r27
     ff4:	66 1f       	adc	r22, r22
     ff6:	77 1f       	adc	r23, r23
     ff8:	88 1f       	adc	r24, r24
     ffa:	c2 f7       	brpl	.-16     	; 0xfec <__addsf3x+0x6a>
     ffc:	0e c0       	rjmp	.+28     	; 0x101a <__addsf3x+0x98>
     ffe:	ba 0f       	add	r27, r26
    1000:	62 1f       	adc	r22, r18
    1002:	73 1f       	adc	r23, r19
    1004:	84 1f       	adc	r24, r20
    1006:	48 f4       	brcc	.+18     	; 0x101a <__addsf3x+0x98>
    1008:	87 95       	ror	r24
    100a:	77 95       	ror	r23
    100c:	67 95       	ror	r22
    100e:	b7 95       	ror	r27
    1010:	f7 95       	ror	r31
    1012:	9e 3f       	cpi	r25, 0xFE	; 254
    1014:	08 f0       	brcs	.+2      	; 0x1018 <__addsf3x+0x96>
    1016:	b3 cf       	rjmp	.-154    	; 0xf7e <__addsf3+0x1e>
    1018:	93 95       	inc	r25
    101a:	88 0f       	add	r24, r24
    101c:	08 f0       	brcs	.+2      	; 0x1020 <__addsf3x+0x9e>
    101e:	99 27       	eor	r25, r25
    1020:	ee 0f       	add	r30, r30
    1022:	97 95       	ror	r25
    1024:	87 95       	ror	r24
    1026:	08 95       	ret

00001028 <__fixunssfsi>:
    1028:	98 d0       	rcall	.+304    	; 0x115a <__fp_splitA>
    102a:	88 f0       	brcs	.+34     	; 0x104e <__fixunssfsi+0x26>
    102c:	9f 57       	subi	r25, 0x7F	; 127
    102e:	90 f0       	brcs	.+36     	; 0x1054 <__fixunssfsi+0x2c>
    1030:	b9 2f       	mov	r27, r25
    1032:	99 27       	eor	r25, r25
    1034:	b7 51       	subi	r27, 0x17	; 23
    1036:	a0 f0       	brcs	.+40     	; 0x1060 <__fixunssfsi+0x38>
    1038:	d1 f0       	breq	.+52     	; 0x106e <__fixunssfsi+0x46>
    103a:	66 0f       	add	r22, r22
    103c:	77 1f       	adc	r23, r23
    103e:	88 1f       	adc	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	1a f0       	brmi	.+6      	; 0x104a <__fixunssfsi+0x22>
    1044:	ba 95       	dec	r27
    1046:	c9 f7       	brne	.-14     	; 0x103a <__fixunssfsi+0x12>
    1048:	12 c0       	rjmp	.+36     	; 0x106e <__fixunssfsi+0x46>
    104a:	b1 30       	cpi	r27, 0x01	; 1
    104c:	81 f0       	breq	.+32     	; 0x106e <__fixunssfsi+0x46>
    104e:	9f d0       	rcall	.+318    	; 0x118e <__fp_zero>
    1050:	b1 e0       	ldi	r27, 0x01	; 1
    1052:	08 95       	ret
    1054:	9c c0       	rjmp	.+312    	; 0x118e <__fp_zero>
    1056:	67 2f       	mov	r22, r23
    1058:	78 2f       	mov	r23, r24
    105a:	88 27       	eor	r24, r24
    105c:	b8 5f       	subi	r27, 0xF8	; 248
    105e:	39 f0       	breq	.+14     	; 0x106e <__fixunssfsi+0x46>
    1060:	b9 3f       	cpi	r27, 0xF9	; 249
    1062:	cc f3       	brlt	.-14     	; 0x1056 <__fixunssfsi+0x2e>
    1064:	86 95       	lsr	r24
    1066:	77 95       	ror	r23
    1068:	67 95       	ror	r22
    106a:	b3 95       	inc	r27
    106c:	d9 f7       	brne	.-10     	; 0x1064 <__fixunssfsi+0x3c>
    106e:	3e f4       	brtc	.+14     	; 0x107e <__fixunssfsi+0x56>
    1070:	90 95       	com	r25
    1072:	80 95       	com	r24
    1074:	70 95       	com	r23
    1076:	61 95       	neg	r22
    1078:	7f 4f       	sbci	r23, 0xFF	; 255
    107a:	8f 4f       	sbci	r24, 0xFF	; 255
    107c:	9f 4f       	sbci	r25, 0xFF	; 255
    107e:	08 95       	ret

00001080 <__floatunsisf>:
    1080:	e8 94       	clt
    1082:	09 c0       	rjmp	.+18     	; 0x1096 <__floatsisf+0x12>

00001084 <__floatsisf>:
    1084:	97 fb       	bst	r25, 7
    1086:	3e f4       	brtc	.+14     	; 0x1096 <__floatsisf+0x12>
    1088:	90 95       	com	r25
    108a:	80 95       	com	r24
    108c:	70 95       	com	r23
    108e:	61 95       	neg	r22
    1090:	7f 4f       	sbci	r23, 0xFF	; 255
    1092:	8f 4f       	sbci	r24, 0xFF	; 255
    1094:	9f 4f       	sbci	r25, 0xFF	; 255
    1096:	99 23       	and	r25, r25
    1098:	a9 f0       	breq	.+42     	; 0x10c4 <__floatsisf+0x40>
    109a:	f9 2f       	mov	r31, r25
    109c:	96 e9       	ldi	r25, 0x96	; 150
    109e:	bb 27       	eor	r27, r27
    10a0:	93 95       	inc	r25
    10a2:	f6 95       	lsr	r31
    10a4:	87 95       	ror	r24
    10a6:	77 95       	ror	r23
    10a8:	67 95       	ror	r22
    10aa:	b7 95       	ror	r27
    10ac:	f1 11       	cpse	r31, r1
    10ae:	f8 cf       	rjmp	.-16     	; 0x10a0 <__floatsisf+0x1c>
    10b0:	fa f4       	brpl	.+62     	; 0x10f0 <__floatsisf+0x6c>
    10b2:	bb 0f       	add	r27, r27
    10b4:	11 f4       	brne	.+4      	; 0x10ba <__floatsisf+0x36>
    10b6:	60 ff       	sbrs	r22, 0
    10b8:	1b c0       	rjmp	.+54     	; 0x10f0 <__floatsisf+0x6c>
    10ba:	6f 5f       	subi	r22, 0xFF	; 255
    10bc:	7f 4f       	sbci	r23, 0xFF	; 255
    10be:	8f 4f       	sbci	r24, 0xFF	; 255
    10c0:	9f 4f       	sbci	r25, 0xFF	; 255
    10c2:	16 c0       	rjmp	.+44     	; 0x10f0 <__floatsisf+0x6c>
    10c4:	88 23       	and	r24, r24
    10c6:	11 f0       	breq	.+4      	; 0x10cc <__floatsisf+0x48>
    10c8:	96 e9       	ldi	r25, 0x96	; 150
    10ca:	11 c0       	rjmp	.+34     	; 0x10ee <__floatsisf+0x6a>
    10cc:	77 23       	and	r23, r23
    10ce:	21 f0       	breq	.+8      	; 0x10d8 <__floatsisf+0x54>
    10d0:	9e e8       	ldi	r25, 0x8E	; 142
    10d2:	87 2f       	mov	r24, r23
    10d4:	76 2f       	mov	r23, r22
    10d6:	05 c0       	rjmp	.+10     	; 0x10e2 <__floatsisf+0x5e>
    10d8:	66 23       	and	r22, r22
    10da:	71 f0       	breq	.+28     	; 0x10f8 <__floatsisf+0x74>
    10dc:	96 e8       	ldi	r25, 0x86	; 134
    10de:	86 2f       	mov	r24, r22
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	60 e0       	ldi	r22, 0x00	; 0
    10e4:	2a f0       	brmi	.+10     	; 0x10f0 <__floatsisf+0x6c>
    10e6:	9a 95       	dec	r25
    10e8:	66 0f       	add	r22, r22
    10ea:	77 1f       	adc	r23, r23
    10ec:	88 1f       	adc	r24, r24
    10ee:	da f7       	brpl	.-10     	; 0x10e6 <__floatsisf+0x62>
    10f0:	88 0f       	add	r24, r24
    10f2:	96 95       	lsr	r25
    10f4:	87 95       	ror	r24
    10f6:	97 f9       	bld	r25, 7
    10f8:	08 95       	ret

000010fa <__fp_inf>:
    10fa:	97 f9       	bld	r25, 7
    10fc:	9f 67       	ori	r25, 0x7F	; 127
    10fe:	80 e8       	ldi	r24, 0x80	; 128
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	08 95       	ret

00001106 <__fp_nan>:
    1106:	9f ef       	ldi	r25, 0xFF	; 255
    1108:	80 ec       	ldi	r24, 0xC0	; 192
    110a:	08 95       	ret

0000110c <__fp_pscA>:
    110c:	00 24       	eor	r0, r0
    110e:	0a 94       	dec	r0
    1110:	16 16       	cp	r1, r22
    1112:	17 06       	cpc	r1, r23
    1114:	18 06       	cpc	r1, r24
    1116:	09 06       	cpc	r0, r25
    1118:	08 95       	ret

0000111a <__fp_pscB>:
    111a:	00 24       	eor	r0, r0
    111c:	0a 94       	dec	r0
    111e:	12 16       	cp	r1, r18
    1120:	13 06       	cpc	r1, r19
    1122:	14 06       	cpc	r1, r20
    1124:	05 06       	cpc	r0, r21
    1126:	08 95       	ret

00001128 <__fp_round>:
    1128:	09 2e       	mov	r0, r25
    112a:	03 94       	inc	r0
    112c:	00 0c       	add	r0, r0
    112e:	11 f4       	brne	.+4      	; 0x1134 <__fp_round+0xc>
    1130:	88 23       	and	r24, r24
    1132:	52 f0       	brmi	.+20     	; 0x1148 <__fp_round+0x20>
    1134:	bb 0f       	add	r27, r27
    1136:	40 f4       	brcc	.+16     	; 0x1148 <__fp_round+0x20>
    1138:	bf 2b       	or	r27, r31
    113a:	11 f4       	brne	.+4      	; 0x1140 <__fp_round+0x18>
    113c:	60 ff       	sbrs	r22, 0
    113e:	04 c0       	rjmp	.+8      	; 0x1148 <__fp_round+0x20>
    1140:	6f 5f       	subi	r22, 0xFF	; 255
    1142:	7f 4f       	sbci	r23, 0xFF	; 255
    1144:	8f 4f       	sbci	r24, 0xFF	; 255
    1146:	9f 4f       	sbci	r25, 0xFF	; 255
    1148:	08 95       	ret

0000114a <__fp_split3>:
    114a:	57 fd       	sbrc	r21, 7
    114c:	90 58       	subi	r25, 0x80	; 128
    114e:	44 0f       	add	r20, r20
    1150:	55 1f       	adc	r21, r21
    1152:	59 f0       	breq	.+22     	; 0x116a <__fp_splitA+0x10>
    1154:	5f 3f       	cpi	r21, 0xFF	; 255
    1156:	71 f0       	breq	.+28     	; 0x1174 <__fp_splitA+0x1a>
    1158:	47 95       	ror	r20

0000115a <__fp_splitA>:
    115a:	88 0f       	add	r24, r24
    115c:	97 fb       	bst	r25, 7
    115e:	99 1f       	adc	r25, r25
    1160:	61 f0       	breq	.+24     	; 0x117a <__fp_splitA+0x20>
    1162:	9f 3f       	cpi	r25, 0xFF	; 255
    1164:	79 f0       	breq	.+30     	; 0x1184 <__fp_splitA+0x2a>
    1166:	87 95       	ror	r24
    1168:	08 95       	ret
    116a:	12 16       	cp	r1, r18
    116c:	13 06       	cpc	r1, r19
    116e:	14 06       	cpc	r1, r20
    1170:	55 1f       	adc	r21, r21
    1172:	f2 cf       	rjmp	.-28     	; 0x1158 <__fp_split3+0xe>
    1174:	46 95       	lsr	r20
    1176:	f1 df       	rcall	.-30     	; 0x115a <__fp_splitA>
    1178:	08 c0       	rjmp	.+16     	; 0x118a <__fp_splitA+0x30>
    117a:	16 16       	cp	r1, r22
    117c:	17 06       	cpc	r1, r23
    117e:	18 06       	cpc	r1, r24
    1180:	99 1f       	adc	r25, r25
    1182:	f1 cf       	rjmp	.-30     	; 0x1166 <__fp_splitA+0xc>
    1184:	86 95       	lsr	r24
    1186:	71 05       	cpc	r23, r1
    1188:	61 05       	cpc	r22, r1
    118a:	08 94       	sec
    118c:	08 95       	ret

0000118e <__fp_zero>:
    118e:	e8 94       	clt

00001190 <__fp_szero>:
    1190:	bb 27       	eor	r27, r27
    1192:	66 27       	eor	r22, r22
    1194:	77 27       	eor	r23, r23
    1196:	cb 01       	movw	r24, r22
    1198:	97 f9       	bld	r25, 7
    119a:	08 95       	ret
    119c:	11 f4       	brne	.+4      	; 0x11a2 <__fp_szero+0x12>
    119e:	0e f4       	brtc	.+2      	; 0x11a2 <__fp_szero+0x12>
    11a0:	b2 cf       	rjmp	.-156    	; 0x1106 <__fp_nan>
    11a2:	3e c0       	rjmp	.+124    	; 0x1220 <__fp_mpack>

000011a4 <sqrt>:
    11a4:	da df       	rcall	.-76     	; 0x115a <__fp_splitA>
    11a6:	d0 f3       	brcs	.-12     	; 0x119c <__fp_szero+0xc>
    11a8:	99 23       	and	r25, r25
    11aa:	d9 f3       	breq	.-10     	; 0x11a2 <__fp_szero+0x12>
    11ac:	ce f3       	brts	.-14     	; 0x11a0 <__fp_szero+0x10>
    11ae:	9f 57       	subi	r25, 0x7F	; 127
    11b0:	55 0b       	sbc	r21, r21
    11b2:	87 ff       	sbrs	r24, 7
    11b4:	43 d0       	rcall	.+134    	; 0x123c <__fp_norm2>
    11b6:	00 24       	eor	r0, r0
    11b8:	a0 e6       	ldi	r26, 0x60	; 96
    11ba:	40 ea       	ldi	r20, 0xA0	; 160
    11bc:	90 01       	movw	r18, r0
    11be:	80 58       	subi	r24, 0x80	; 128
    11c0:	56 95       	lsr	r21
    11c2:	97 95       	ror	r25
    11c4:	28 f4       	brcc	.+10     	; 0x11d0 <sqrt+0x2c>
    11c6:	80 5c       	subi	r24, 0xC0	; 192
    11c8:	66 0f       	add	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	88 1f       	adc	r24, r24
    11ce:	20 f0       	brcs	.+8      	; 0x11d8 <sqrt+0x34>
    11d0:	26 17       	cp	r18, r22
    11d2:	37 07       	cpc	r19, r23
    11d4:	48 07       	cpc	r20, r24
    11d6:	30 f4       	brcc	.+12     	; 0x11e4 <sqrt+0x40>
    11d8:	62 1b       	sub	r22, r18
    11da:	73 0b       	sbc	r23, r19
    11dc:	84 0b       	sbc	r24, r20
    11de:	20 29       	or	r18, r0
    11e0:	31 29       	or	r19, r1
    11e2:	4a 2b       	or	r20, r26
    11e4:	a6 95       	lsr	r26
    11e6:	17 94       	ror	r1
    11e8:	07 94       	ror	r0
    11ea:	20 25       	eor	r18, r0
    11ec:	31 25       	eor	r19, r1
    11ee:	4a 27       	eor	r20, r26
    11f0:	58 f7       	brcc	.-42     	; 0x11c8 <sqrt+0x24>
    11f2:	66 0f       	add	r22, r22
    11f4:	77 1f       	adc	r23, r23
    11f6:	88 1f       	adc	r24, r24
    11f8:	20 f0       	brcs	.+8      	; 0x1202 <sqrt+0x5e>
    11fa:	26 17       	cp	r18, r22
    11fc:	37 07       	cpc	r19, r23
    11fe:	48 07       	cpc	r20, r24
    1200:	30 f4       	brcc	.+12     	; 0x120e <sqrt+0x6a>
    1202:	62 0b       	sbc	r22, r18
    1204:	73 0b       	sbc	r23, r19
    1206:	84 0b       	sbc	r24, r20
    1208:	20 0d       	add	r18, r0
    120a:	31 1d       	adc	r19, r1
    120c:	41 1d       	adc	r20, r1
    120e:	a0 95       	com	r26
    1210:	81 f7       	brne	.-32     	; 0x11f2 <sqrt+0x4e>
    1212:	b9 01       	movw	r22, r18
    1214:	84 2f       	mov	r24, r20
    1216:	91 58       	subi	r25, 0x81	; 129
    1218:	88 0f       	add	r24, r24
    121a:	96 95       	lsr	r25
    121c:	87 95       	ror	r24
    121e:	08 95       	ret

00001220 <__fp_mpack>:
    1220:	9f 3f       	cpi	r25, 0xFF	; 255
    1222:	31 f0       	breq	.+12     	; 0x1230 <__fp_mpack_finite+0xc>

00001224 <__fp_mpack_finite>:
    1224:	91 50       	subi	r25, 0x01	; 1
    1226:	20 f4       	brcc	.+8      	; 0x1230 <__fp_mpack_finite+0xc>
    1228:	87 95       	ror	r24
    122a:	77 95       	ror	r23
    122c:	67 95       	ror	r22
    122e:	b7 95       	ror	r27
    1230:	88 0f       	add	r24, r24
    1232:	91 1d       	adc	r25, r1
    1234:	96 95       	lsr	r25
    1236:	87 95       	ror	r24
    1238:	97 f9       	bld	r25, 7
    123a:	08 95       	ret

0000123c <__fp_norm2>:
    123c:	91 50       	subi	r25, 0x01	; 1
    123e:	50 40       	sbci	r21, 0x00	; 0
    1240:	66 0f       	add	r22, r22
    1242:	77 1f       	adc	r23, r23
    1244:	88 1f       	adc	r24, r24
    1246:	d2 f7       	brpl	.-12     	; 0x123c <__fp_norm2>
    1248:	08 95       	ret

0000124a <__udivmodhi4>:
    124a:	aa 1b       	sub	r26, r26
    124c:	bb 1b       	sub	r27, r27
    124e:	51 e1       	ldi	r21, 0x11	; 17
    1250:	07 c0       	rjmp	.+14     	; 0x1260 <__udivmodhi4_ep>

00001252 <__udivmodhi4_loop>:
    1252:	aa 1f       	adc	r26, r26
    1254:	bb 1f       	adc	r27, r27
    1256:	a6 17       	cp	r26, r22
    1258:	b7 07       	cpc	r27, r23
    125a:	10 f0       	brcs	.+4      	; 0x1260 <__udivmodhi4_ep>
    125c:	a6 1b       	sub	r26, r22
    125e:	b7 0b       	sbc	r27, r23

00001260 <__udivmodhi4_ep>:
    1260:	88 1f       	adc	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	5a 95       	dec	r21
    1266:	a9 f7       	brne	.-22     	; 0x1252 <__udivmodhi4_loop>
    1268:	80 95       	com	r24
    126a:	90 95       	com	r25
    126c:	bc 01       	movw	r22, r24
    126e:	cd 01       	movw	r24, r26
    1270:	08 95       	ret

00001272 <__divmodhi4>:
    1272:	97 fb       	bst	r25, 7
    1274:	07 2e       	mov	r0, r23
    1276:	16 f4       	brtc	.+4      	; 0x127c <__divmodhi4+0xa>
    1278:	00 94       	com	r0
    127a:	06 d0       	rcall	.+12     	; 0x1288 <__divmodhi4_neg1>
    127c:	77 fd       	sbrc	r23, 7
    127e:	08 d0       	rcall	.+16     	; 0x1290 <__divmodhi4_neg2>
    1280:	e4 df       	rcall	.-56     	; 0x124a <__udivmodhi4>
    1282:	07 fc       	sbrc	r0, 7
    1284:	05 d0       	rcall	.+10     	; 0x1290 <__divmodhi4_neg2>
    1286:	3e f4       	brtc	.+14     	; 0x1296 <__divmodhi4_exit>

00001288 <__divmodhi4_neg1>:
    1288:	90 95       	com	r25
    128a:	81 95       	neg	r24
    128c:	9f 4f       	sbci	r25, 0xFF	; 255
    128e:	08 95       	ret

00001290 <__divmodhi4_neg2>:
    1290:	70 95       	com	r23
    1292:	61 95       	neg	r22
    1294:	7f 4f       	sbci	r23, 0xFF	; 255

00001296 <__divmodhi4_exit>:
    1296:	08 95       	ret

00001298 <__umulhisi3>:
    1298:	a2 9f       	mul	r26, r18
    129a:	b0 01       	movw	r22, r0
    129c:	b3 9f       	mul	r27, r19
    129e:	c0 01       	movw	r24, r0
    12a0:	a3 9f       	mul	r26, r19
    12a2:	70 0d       	add	r23, r0
    12a4:	81 1d       	adc	r24, r1
    12a6:	11 24       	eor	r1, r1
    12a8:	91 1d       	adc	r25, r1
    12aa:	b2 9f       	mul	r27, r18
    12ac:	70 0d       	add	r23, r0
    12ae:	81 1d       	adc	r24, r1
    12b0:	11 24       	eor	r1, r1
    12b2:	91 1d       	adc	r25, r1
    12b4:	08 95       	ret

000012b6 <do_rand>:
    12b6:	8f 92       	push	r8
    12b8:	9f 92       	push	r9
    12ba:	af 92       	push	r10
    12bc:	bf 92       	push	r11
    12be:	cf 92       	push	r12
    12c0:	df 92       	push	r13
    12c2:	ef 92       	push	r14
    12c4:	ff 92       	push	r15
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	ec 01       	movw	r28, r24
    12cc:	68 81       	ld	r22, Y
    12ce:	79 81       	ldd	r23, Y+1	; 0x01
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	9b 81       	ldd	r25, Y+3	; 0x03
    12d4:	61 15       	cp	r22, r1
    12d6:	71 05       	cpc	r23, r1
    12d8:	81 05       	cpc	r24, r1
    12da:	91 05       	cpc	r25, r1
    12dc:	21 f4       	brne	.+8      	; 0x12e6 <do_rand+0x30>
    12de:	64 e2       	ldi	r22, 0x24	; 36
    12e0:	79 ed       	ldi	r23, 0xD9	; 217
    12e2:	8b e5       	ldi	r24, 0x5B	; 91
    12e4:	97 e0       	ldi	r25, 0x07	; 7
    12e6:	2d e1       	ldi	r18, 0x1D	; 29
    12e8:	33 ef       	ldi	r19, 0xF3	; 243
    12ea:	41 e0       	ldi	r20, 0x01	; 1
    12ec:	50 e0       	ldi	r21, 0x00	; 0
    12ee:	38 d0       	rcall	.+112    	; 0x1360 <__divmodsi4>
    12f0:	49 01       	movw	r8, r18
    12f2:	5a 01       	movw	r10, r20
    12f4:	9b 01       	movw	r18, r22
    12f6:	ac 01       	movw	r20, r24
    12f8:	a7 ea       	ldi	r26, 0xA7	; 167
    12fa:	b1 e4       	ldi	r27, 0x41	; 65
    12fc:	4d d0       	rcall	.+154    	; 0x1398 <__muluhisi3>
    12fe:	6b 01       	movw	r12, r22
    1300:	7c 01       	movw	r14, r24
    1302:	ac ee       	ldi	r26, 0xEC	; 236
    1304:	b4 ef       	ldi	r27, 0xF4	; 244
    1306:	a5 01       	movw	r20, r10
    1308:	94 01       	movw	r18, r8
    130a:	52 d0       	rcall	.+164    	; 0x13b0 <__mulohisi3>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	8c 0d       	add	r24, r12
    1312:	9d 1d       	adc	r25, r13
    1314:	ae 1d       	adc	r26, r14
    1316:	bf 1d       	adc	r27, r15
    1318:	b7 ff       	sbrs	r27, 7
    131a:	03 c0       	rjmp	.+6      	; 0x1322 <do_rand+0x6c>
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	a1 09       	sbc	r26, r1
    1320:	b0 48       	sbci	r27, 0x80	; 128
    1322:	88 83       	st	Y, r24
    1324:	99 83       	std	Y+1, r25	; 0x01
    1326:	aa 83       	std	Y+2, r26	; 0x02
    1328:	bb 83       	std	Y+3, r27	; 0x03
    132a:	9f 77       	andi	r25, 0x7F	; 127
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	ff 90       	pop	r15
    1332:	ef 90       	pop	r14
    1334:	df 90       	pop	r13
    1336:	cf 90       	pop	r12
    1338:	bf 90       	pop	r11
    133a:	af 90       	pop	r10
    133c:	9f 90       	pop	r9
    133e:	8f 90       	pop	r8
    1340:	08 95       	ret

00001342 <rand_r>:
    1342:	b9 cf       	rjmp	.-142    	; 0x12b6 <do_rand>

00001344 <rand>:
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	91 e0       	ldi	r25, 0x01	; 1
    1348:	b6 cf       	rjmp	.-148    	; 0x12b6 <do_rand>

0000134a <srand>:
    134a:	a0 e0       	ldi	r26, 0x00	; 0
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1352:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1356:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    135a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    135e:	08 95       	ret

00001360 <__divmodsi4>:
    1360:	05 2e       	mov	r0, r21
    1362:	97 fb       	bst	r25, 7
    1364:	16 f4       	brtc	.+4      	; 0x136a <__divmodsi4+0xa>
    1366:	00 94       	com	r0
    1368:	0f d0       	rcall	.+30     	; 0x1388 <__negsi2>
    136a:	57 fd       	sbrc	r21, 7
    136c:	05 d0       	rcall	.+10     	; 0x1378 <__divmodsi4_neg2>
    136e:	24 d0       	rcall	.+72     	; 0x13b8 <__udivmodsi4>
    1370:	07 fc       	sbrc	r0, 7
    1372:	02 d0       	rcall	.+4      	; 0x1378 <__divmodsi4_neg2>
    1374:	46 f4       	brtc	.+16     	; 0x1386 <__divmodsi4_exit>
    1376:	08 c0       	rjmp	.+16     	; 0x1388 <__negsi2>

00001378 <__divmodsi4_neg2>:
    1378:	50 95       	com	r21
    137a:	40 95       	com	r20
    137c:	30 95       	com	r19
    137e:	21 95       	neg	r18
    1380:	3f 4f       	sbci	r19, 0xFF	; 255
    1382:	4f 4f       	sbci	r20, 0xFF	; 255
    1384:	5f 4f       	sbci	r21, 0xFF	; 255

00001386 <__divmodsi4_exit>:
    1386:	08 95       	ret

00001388 <__negsi2>:
    1388:	90 95       	com	r25
    138a:	80 95       	com	r24
    138c:	70 95       	com	r23
    138e:	61 95       	neg	r22
    1390:	7f 4f       	sbci	r23, 0xFF	; 255
    1392:	8f 4f       	sbci	r24, 0xFF	; 255
    1394:	9f 4f       	sbci	r25, 0xFF	; 255
    1396:	08 95       	ret

00001398 <__muluhisi3>:
    1398:	7f df       	rcall	.-258    	; 0x1298 <__umulhisi3>
    139a:	a5 9f       	mul	r26, r21
    139c:	90 0d       	add	r25, r0
    139e:	b4 9f       	mul	r27, r20
    13a0:	90 0d       	add	r25, r0
    13a2:	a4 9f       	mul	r26, r20
    13a4:	80 0d       	add	r24, r0
    13a6:	91 1d       	adc	r25, r1
    13a8:	11 24       	eor	r1, r1
    13aa:	08 95       	ret

000013ac <__mulshisi3>:
    13ac:	b7 ff       	sbrs	r27, 7
    13ae:	f4 cf       	rjmp	.-24     	; 0x1398 <__muluhisi3>

000013b0 <__mulohisi3>:
    13b0:	f3 df       	rcall	.-26     	; 0x1398 <__muluhisi3>
    13b2:	82 1b       	sub	r24, r18
    13b4:	93 0b       	sbc	r25, r19
    13b6:	08 95       	ret

000013b8 <__udivmodsi4>:
    13b8:	a1 e2       	ldi	r26, 0x21	; 33
    13ba:	1a 2e       	mov	r1, r26
    13bc:	aa 1b       	sub	r26, r26
    13be:	bb 1b       	sub	r27, r27
    13c0:	fd 01       	movw	r30, r26
    13c2:	0d c0       	rjmp	.+26     	; 0x13de <__udivmodsi4_ep>

000013c4 <__udivmodsi4_loop>:
    13c4:	aa 1f       	adc	r26, r26
    13c6:	bb 1f       	adc	r27, r27
    13c8:	ee 1f       	adc	r30, r30
    13ca:	ff 1f       	adc	r31, r31
    13cc:	a2 17       	cp	r26, r18
    13ce:	b3 07       	cpc	r27, r19
    13d0:	e4 07       	cpc	r30, r20
    13d2:	f5 07       	cpc	r31, r21
    13d4:	20 f0       	brcs	.+8      	; 0x13de <__udivmodsi4_ep>
    13d6:	a2 1b       	sub	r26, r18
    13d8:	b3 0b       	sbc	r27, r19
    13da:	e4 0b       	sbc	r30, r20
    13dc:	f5 0b       	sbc	r31, r21

000013de <__udivmodsi4_ep>:
    13de:	66 1f       	adc	r22, r22
    13e0:	77 1f       	adc	r23, r23
    13e2:	88 1f       	adc	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	1a 94       	dec	r1
    13e8:	69 f7       	brne	.-38     	; 0x13c4 <__udivmodsi4_loop>
    13ea:	60 95       	com	r22
    13ec:	70 95       	com	r23
    13ee:	80 95       	com	r24
    13f0:	90 95       	com	r25
    13f2:	9b 01       	movw	r18, r22
    13f4:	ac 01       	movw	r20, r24
    13f6:	bd 01       	movw	r22, r26
    13f8:	cf 01       	movw	r24, r30
    13fa:	08 95       	ret

000013fc <_exit>:
    13fc:	f8 94       	cli

000013fe <__stop_program>:
    13fe:	ff cf       	rjmp	.-2      	; 0x13fe <__stop_program>
